// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * This resource defines two config var attributes with one of them used for masking any sensitive/secret variables
 *
 * during a `pulumi preview|apply` in a CI build, terminal, etc. This 'sensitive' distinction for config vars is unique to
 *
 * this provider and not a built-in feature of the Heroku Platform API. Therefore, it will not be possible to import
 *
 * this resource.
 *
 * However, it is safe to define the resource in your configuration file and execute a `pulumi up`
 *
 * as the end result is `noop` when the config vars already exist on the remote resource.
 */
export class ConfigAssociation extends pulumi.CustomResource {
    /**
     * Get an existing ConfigAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigAssociationState, opts?: pulumi.CustomResourceOptions): ConfigAssociation {
        return new ConfigAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'heroku:app/configAssociation:ConfigAssociation';

    /**
     * Returns true if the given object is an instance of ConfigAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigAssociation.__pulumiType;
    }

    /**
     * Heroku app ID (do not use app name)
     */
    public readonly appId!: pulumi.Output<string>;
    public readonly sensitiveVars!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of config vars that can be output in plaintext.
     */
    public readonly vars!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ConfigAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigAssociationArgs | ConfigAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigAssociationState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["sensitiveVars"] = state ? state.sensitiveVars : undefined;
            resourceInputs["vars"] = state ? state.vars : undefined;
        } else {
            const args = argsOrState as ConfigAssociationArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["sensitiveVars"] = args?.sensitiveVars ? pulumi.secret(args.sensitiveVars) : undefined;
            resourceInputs["vars"] = args ? args.vars : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sensitiveVars"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConfigAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigAssociation resources.
 */
export interface ConfigAssociationState {
    /**
     * Heroku app ID (do not use app name)
     */
    appId?: pulumi.Input<string>;
    sensitiveVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of config vars that can be output in plaintext.
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ConfigAssociation resource.
 */
export interface ConfigAssociationArgs {
    /**
     * Heroku app ID (do not use app name)
     */
    appId: pulumi.Input<string>;
    sensitiveVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of config vars that can be output in plaintext.
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
