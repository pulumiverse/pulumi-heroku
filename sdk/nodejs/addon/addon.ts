// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Heroku Add-On resource. These can be attach
 * services to a Heroku app.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Addons can be imported using the Addon `id`, e.g.
 *
 * ```sh
 * $ pulumi import heroku:addon/addon:Addon foobar 12345678
 * ```
 */
export class Addon extends pulumi.CustomResource {
    /**
     * Get an existing Addon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AddonState, opts?: pulumi.CustomResourceOptions): Addon {
        return new Addon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'heroku:addon/addon:Addon';

    /**
     * Returns true if the given object is an instance of Addon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Addon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Addon.__pulumiType;
    }

    /**
     * Heroku app ID (do not use app name)
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * Optional plan configuration.
     */
    public readonly config!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly configVarValues!: pulumi.Output<{[key: string]: string}>;
    /**
     * The Configuration variables of the add-on
     */
    public /*out*/ readonly configVars!: pulumi.Output<string[]>;
    /**
     * Globally unique name of the add-on.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The addon to add.
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * The ID of the plan provider
     */
    public /*out*/ readonly providerId!: pulumi.Output<string>;

    /**
     * Create a Addon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AddonArgs | AddonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AddonState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["configVarValues"] = state ? state.configVarValues : undefined;
            resourceInputs["configVars"] = state ? state.configVars : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["providerId"] = state ? state.providerId : undefined;
        } else {
            const args = argsOrState as AddonArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["configVarValues"] = undefined /*out*/;
            resourceInputs["configVars"] = undefined /*out*/;
            resourceInputs["providerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["configVarValues"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Addon.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Addon resources.
 */
export interface AddonState {
    /**
     * Heroku app ID (do not use app name)
     */
    appId?: pulumi.Input<string>;
    /**
     * Optional plan configuration.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    configVarValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Configuration variables of the add-on
     */
    configVars?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Globally unique name of the add-on.
     */
    name?: pulumi.Input<string>;
    /**
     * The addon to add.
     */
    plan?: pulumi.Input<string>;
    /**
     * The ID of the plan provider
     */
    providerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Addon resource.
 */
export interface AddonArgs {
    /**
     * Heroku app ID (do not use app name)
     */
    appId: pulumi.Input<string>;
    /**
     * Optional plan configuration.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Globally unique name of the add-on.
     */
    name?: pulumi.Input<string>;
    /**
     * The addon to add.
     */
    plan: pulumi.Input<string>;
}
