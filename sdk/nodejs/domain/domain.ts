// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'heroku:domain/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * Heroku app ID (do not use app name)
     *
     * For apps with ACM enabled (automated certificate management):
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * The CNAME traffic should route to.
     */
    public /*out*/ readonly cname!: pulumi.Output<string>;
    /**
     * Must match common name or a subject alternative name of certificate in the `heroku.ssl.Ssl` resource references by `sniEndpointId`.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * The ID of the `heroku.ssl.Ssl` resource to associate the domain with.
     */
    public readonly sniEndpointId!: pulumi.Output<string | undefined>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["sniEndpointId"] = state ? state.sniEndpointId : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["sniEndpointId"] = args ? args.sniEndpointId : undefined;
            resourceInputs["cname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * Heroku app ID (do not use app name)
     *
     * For apps with ACM enabled (automated certificate management):
     */
    appId?: pulumi.Input<string>;
    /**
     * The CNAME traffic should route to.
     */
    cname?: pulumi.Input<string>;
    /**
     * Must match common name or a subject alternative name of certificate in the `heroku.ssl.Ssl` resource references by `sniEndpointId`.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The ID of the `heroku.ssl.Ssl` resource to associate the domain with.
     */
    sniEndpointId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * Heroku app ID (do not use app name)
     *
     * For apps with ACM enabled (automated certificate management):
     */
    appId: pulumi.Input<string>;
    /**
     * Must match common name or a subject alternative name of certificate in the `heroku.ssl.Ssl` resource references by `sniEndpointId`.
     */
    hostname: pulumi.Input<string>;
    /**
     * The ID of the `heroku.ssl.Ssl` resource to associate the domain with.
     */
    sniEndpointId?: pulumi.Input<string>;
}
