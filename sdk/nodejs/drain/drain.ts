// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Heroku Drain resource. This can be used to
 * create and manage Log Drains on Heroku.
 *
 * ## Example Usage
 *
 * ## Importing
 *
 * When importing a Heroku drain resource, the ID must be built using the app name colon the unique ID from the Heroku API.
 * For an app named `production-api` with a drain ID of `b85d9224-310b-409b-891e-c903f5a40568` and the `url` attribute value
 * defined for the resource, you would import it as:
 *
 * When importing a Heroku drain resource, the ID must be built using the app name colon the unique ID from the Heroku API.
 * For an app named `production-api` with a drain ID of `b85d9224-310b-409b-891e-c903f5a40568` and the `sensitiveUrl` attribute value
 * defined for the resource, you would import it as:
 */
export class Drain extends pulumi.CustomResource {
    /**
     * Get an existing Drain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DrainState, opts?: pulumi.CustomResourceOptions): Drain {
        return new Drain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'heroku:drain/drain:Drain';

    /**
     * Returns true if the given object is an instance of Drain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Drain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Drain.__pulumiType;
    }

    /**
     * Heroku app ID (do not use app name)
     */
    public readonly appId!: pulumi.Output<string>;
    public readonly sensitiveUrl!: pulumi.Output<string | undefined>;
    /**
     * The unique token for your created drain.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * The URL for Heroku to drain your logs to. Either `url` or `sensitiveUrl` must be defined.
     */
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a Drain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DrainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DrainArgs | DrainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DrainState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["sensitiveUrl"] = state ? state.sensitiveUrl : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as DrainArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["sensitiveUrl"] = args?.sensitiveUrl ? pulumi.secret(args.sensitiveUrl) : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sensitiveUrl"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Drain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Drain resources.
 */
export interface DrainState {
    /**
     * Heroku app ID (do not use app name)
     */
    appId?: pulumi.Input<string>;
    sensitiveUrl?: pulumi.Input<string>;
    /**
     * The unique token for your created drain.
     */
    token?: pulumi.Input<string>;
    /**
     * The URL for Heroku to drain your logs to. Either `url` or `sensitiveUrl` must be defined.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Drain resource.
 */
export interface DrainArgs {
    /**
     * Heroku app ID (do not use app name)
     */
    appId: pulumi.Input<string>;
    sensitiveUrl?: pulumi.Input<string>;
    /**
     * The URL for Heroku to drain your logs to. Either `url` or `sensitiveUrl` must be defined.
     */
    url?: pulumi.Input<string>;
}
