// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a [Heroku Pipeline Coupling](https://devcenter.heroku.com/articles/pipelines)
 * resource.
 *
 * A pipeline is a group of Heroku apps that share the same codebase. Once a
 * pipeline is created using `heroku.pipeline.Pipeline`, and apps are added
 * to different stages using `heroku.pipeline.Coupling`, you can promote app slugs
 * to the downstream stages.
 *
 * See `heroku.pipeline.Pipeline` for complete usage documentation.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Pipeline couplings can be imported using the Pipeline coupling `id`, e.g.
 *
 * ```sh
 * $ pulumi import heroku:pipeline/coupling:Coupling foobar 12345678
 * ```
 */
export class Coupling extends pulumi.CustomResource {
    /**
     * Get an existing Coupling resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CouplingState, opts?: pulumi.CustomResourceOptions): Coupling {
        return new Coupling(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'heroku:pipeline/coupling:Coupling';

    /**
     * Returns true if the given object is an instance of Coupling.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Coupling {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Coupling.__pulumiType;
    }

    /**
     * Heroku app ID (do not use app name)
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * The ID of the pipeline to add this app to.
     */
    public readonly pipeline!: pulumi.Output<string>;
    /**
     * The stage to couple this app to. Must be one of
     * `review`, `development`, `staging`, or `production`.
     */
    public readonly stage!: pulumi.Output<string>;

    /**
     * Create a Coupling resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CouplingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CouplingArgs | CouplingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CouplingState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["pipeline"] = state ? state.pipeline : undefined;
            resourceInputs["stage"] = state ? state.stage : undefined;
        } else {
            const args = argsOrState as CouplingArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.pipeline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipeline'");
            }
            if ((!args || args.stage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stage'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["pipeline"] = args ? args.pipeline : undefined;
            resourceInputs["stage"] = args ? args.stage : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Coupling.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Coupling resources.
 */
export interface CouplingState {
    /**
     * Heroku app ID (do not use app name)
     */
    appId?: pulumi.Input<string>;
    /**
     * The ID of the pipeline to add this app to.
     */
    pipeline?: pulumi.Input<string>;
    /**
     * The stage to couple this app to. Must be one of
     * `review`, `development`, `staging`, or `production`.
     */
    stage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Coupling resource.
 */
export interface CouplingArgs {
    /**
     * Heroku app ID (do not use app name)
     */
    appId: pulumi.Input<string>;
    /**
     * The ID of the pipeline to add this app to.
     */
    pipeline: pulumi.Input<string>;
    /**
     * The stage to couple this app to. Must be one of
     * `review`, `development`, `staging`, or `production`.
     */
    stage: pulumi.Input<string>;
}
