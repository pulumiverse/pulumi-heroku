// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A [Heroku Team Collaborator](https://devcenter.heroku.com/articles/platform-api-reference#team-app-collaborator)
 * receives access to a specific Team-owned app.
 *
 * To create a Heroku Team, use the [New Team](https://dashboard.heroku.com/teams/new) feature of Heroku Dashboard.
 * For Heroku Enterprise accounts, new Teams may be created within the account by users with the right permissions.
 *
 * A Heroku "team" was originally called an "organization", and that is still the identifier used elsewhere in this provider.
 * For `heroku.app.App` & `heroku.space.Space` resources, set the Heroku Team name as the "organization".
 *
 * > **IMPORTANT:**
 * This resource only works for Team-owned apps.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Team Collaborators can be imported using the combination of the team application name, a colon, and the collaborator's email address
 *
 * For example:
 *
 * ```sh
 * $ pulumi import heroku:team/collaborator:Collaborator foobar-collaborator foobar_app:collaborator@foobar.com
 * ```
 */
export class Collaborator extends pulumi.CustomResource {
    /**
     * Get an existing Collaborator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CollaboratorState, opts?: pulumi.CustomResourceOptions): Collaborator {
        return new Collaborator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'heroku:team/collaborator:Collaborator';

    /**
     * Returns true if the given object is an instance of Collaborator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Collaborator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Collaborator.__pulumiType;
    }

    /**
     * Heroku app ID (do not use app name)
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * Email address of the team collaborator
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * List of permissions that will be granted to the team collaborator. The order in which
     * individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
     * for more information on available permissions.
     */
    public readonly permissions!: pulumi.Output<string[]>;

    /**
     * Create a Collaborator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CollaboratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CollaboratorArgs | CollaboratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CollaboratorState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as CollaboratorArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Collaborator.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Collaborator resources.
 */
export interface CollaboratorState {
    /**
     * Heroku app ID (do not use app name)
     */
    appId?: pulumi.Input<string>;
    /**
     * Email address of the team collaborator
     */
    email?: pulumi.Input<string>;
    /**
     * List of permissions that will be granted to the team collaborator. The order in which
     * individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
     * for more information on available permissions.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Collaborator resource.
 */
export interface CollaboratorArgs {
    /**
     * Heroku app ID (do not use app name)
     */
    appId: pulumi.Input<string>;
    /**
     * Email address of the team collaborator
     */
    email: pulumi.Input<string>;
    /**
     * List of permissions that will be granted to the team collaborator. The order in which
     * individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
     * for more information on available permissions.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}
