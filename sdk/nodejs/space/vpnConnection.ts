// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource for creating a VPN connection between a network and a Heroku Private Space. For more information, see [Private Spaces VPN Connection](https://devcenter.heroku.com/articles/private-space-vpn-connection?preview=1) in the Heroku DevCenter.
 *
 * ## Example Usage
 */
export class VpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnConnectionState, opts?: pulumi.CustomResourceOptions): VpnConnection {
        return new VpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'heroku:space/vpnConnection:VpnConnection';

    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }

    /**
     * The IKE version used to setup the IPsec tunnel.
     */
    public /*out*/ readonly ikeVersion!: pulumi.Output<number>;
    /**
     * The name of the VPN connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The public IP address of the VPN endpoint on the network where the VPN connection will be established.
     */
    public readonly publicIp!: pulumi.Output<string>;
    /**
     * A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
     */
    public readonly routableCidrs!: pulumi.Output<string[]>;
    /**
     * The ID of the Heroku Private Space where the VPN connection will be established.
     */
    public readonly space!: pulumi.Output<string>;
    /**
     * The CIDR block for the Heroku Private Space. The network where the VPN will be established should be configured to route traffic destined for this CIDR block over the VPN link.
     */
    public /*out*/ readonly spaceCidrBlock!: pulumi.Output<string>;
    /**
     * Details about each VPN tunnel endpoint.
     */
    public readonly tunnels!: pulumi.Output<outputs.space.VpnConnectionTunnel[]>;

    /**
     * Create a VpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnConnectionArgs | VpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnConnectionState | undefined;
            resourceInputs["ikeVersion"] = state ? state.ikeVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["routableCidrs"] = state ? state.routableCidrs : undefined;
            resourceInputs["space"] = state ? state.space : undefined;
            resourceInputs["spaceCidrBlock"] = state ? state.spaceCidrBlock : undefined;
            resourceInputs["tunnels"] = state ? state.tunnels : undefined;
        } else {
            const args = argsOrState as VpnConnectionArgs | undefined;
            if ((!args || args.publicIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicIp'");
            }
            if ((!args || args.routableCidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routableCidrs'");
            }
            if ((!args || args.space === undefined) && !opts.urn) {
                throw new Error("Missing required property 'space'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["routableCidrs"] = args ? args.routableCidrs : undefined;
            resourceInputs["space"] = args ? args.space : undefined;
            resourceInputs["tunnels"] = args ? args.tunnels : undefined;
            resourceInputs["ikeVersion"] = undefined /*out*/;
            resourceInputs["spaceCidrBlock"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnConnection resources.
 */
export interface VpnConnectionState {
    /**
     * The IKE version used to setup the IPsec tunnel.
     */
    ikeVersion?: pulumi.Input<number>;
    /**
     * The name of the VPN connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The public IP address of the VPN endpoint on the network where the VPN connection will be established.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
     */
    routableCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Heroku Private Space where the VPN connection will be established.
     */
    space?: pulumi.Input<string>;
    /**
     * The CIDR block for the Heroku Private Space. The network where the VPN will be established should be configured to route traffic destined for this CIDR block over the VPN link.
     */
    spaceCidrBlock?: pulumi.Input<string>;
    /**
     * Details about each VPN tunnel endpoint.
     */
    tunnels?: pulumi.Input<pulumi.Input<inputs.space.VpnConnectionTunnel>[]>;
}

/**
 * The set of arguments for constructing a VpnConnection resource.
 */
export interface VpnConnectionArgs {
    /**
     * The name of the VPN connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The public IP address of the VPN endpoint on the network where the VPN connection will be established.
     */
    publicIp: pulumi.Input<string>;
    /**
     * A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
     */
    routableCidrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Heroku Private Space where the VPN connection will be established.
     */
    space: pulumi.Input<string>;
    /**
     * Details about each VPN tunnel endpoint.
     */
    tunnels?: pulumi.Input<pulumi.Input<inputs.space.VpnConnectionTunnel>[]>;
}
