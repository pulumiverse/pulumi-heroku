// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Heroku.Space
{
    /// <summary>
    /// Provides a resource for managing permissions for the entire Private Space. Members with the admin role will
    /// always have full permissions in the Private Space, so using this resource on an admin will have no effect.
    /// The provided email must already be a member of the Heroku Team. Currently, the only supported permission is `create_apps`.
    /// 
    /// ## Example Usage
    /// 
    /// ## Importing
    /// 
    /// Existing permissions can be imported using the combination of the Private Space name, a colon, and the member email.
    /// 
    /// For example:
    /// </summary>
    [HerokuResourceType("heroku:space/appAccess:AppAccess")]
    public partial class AppAccess : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The email of the existing Heroku Team member.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// The permissions to grant the team member for the Private Space.
        /// Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
        /// Members with admin role will always have `create_apps` permissions, which cannot be removed.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The ID of the Private Space.
        /// </summary>
        [Output("space")]
        public Output<string> Space { get; private set; } = null!;


        /// <summary>
        /// Create a AppAccess resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppAccess(string name, AppAccessArgs args, CustomResourceOptions? options = null)
            : base("heroku:space/appAccess:AppAccess", name, args ?? new AppAccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppAccess(string name, Input<string> id, AppAccessState? state = null, CustomResourceOptions? options = null)
            : base("heroku:space/appAccess:AppAccess", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppAccess resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppAccess Get(string name, Input<string> id, AppAccessState? state = null, CustomResourceOptions? options = null)
        {
            return new AppAccess(name, id, state, options);
        }
    }

    public sealed class AppAccessArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email of the existing Heroku Team member.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        [Input("permissions", required: true)]
        private InputList<string>? _permissions;

        /// <summary>
        /// The permissions to grant the team member for the Private Space.
        /// Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
        /// Members with admin role will always have `create_apps` permissions, which cannot be removed.
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// The ID of the Private Space.
        /// </summary>
        [Input("space", required: true)]
        public Input<string> Space { get; set; } = null!;

        public AppAccessArgs()
        {
        }
        public static new AppAccessArgs Empty => new AppAccessArgs();
    }

    public sealed class AppAccessState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email of the existing Heroku Team member.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// The permissions to grant the team member for the Private Space.
        /// Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
        /// Members with admin role will always have `create_apps` permissions, which cannot be removed.
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// The ID of the Private Space.
        /// </summary>
        [Input("space")]
        public Input<string>? Space { get; set; }

        public AppAccessState()
        {
        }
        public static new AppAccessState Empty => new AppAccessState();
    }
}
