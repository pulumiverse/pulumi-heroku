// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Heroku.Pipeline
{
    /// <summary>
    /// Provides a [Heroku Pipeline Coupling](https://devcenter.heroku.com/articles/pipelines)
    /// resource.
    /// 
    /// A pipeline is a group of Heroku apps that share the same codebase. Once a
    /// pipeline is created using `heroku.pipeline.Pipeline`, and apps are added
    /// to different stages using `heroku.pipeline.Coupling`, you can promote app slugs
    /// to the downstream stages.
    /// 
    /// See `heroku.pipeline.Pipeline` for complete usage documentation.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Pipeline couplings can be imported using the Pipeline coupling `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import heroku:pipeline/coupling:Coupling foobar 12345678
    /// ```
    /// </summary>
    [HerokuResourceType("heroku:pipeline/coupling:Coupling")]
    public partial class Coupling : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Heroku app ID (do not use app name)
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// The ID of the pipeline to add this app to.
        /// </summary>
        [Output("pipeline")]
        public Output<string> Pipeline { get; private set; } = null!;

        /// <summary>
        /// The stage to couple this app to. Must be one of
        /// `review`, `development`, `staging`, or `production`.
        /// </summary>
        [Output("stage")]
        public Output<string> Stage { get; private set; } = null!;


        /// <summary>
        /// Create a Coupling resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Coupling(string name, CouplingArgs args, CustomResourceOptions? options = null)
            : base("heroku:pipeline/coupling:Coupling", name, args ?? new CouplingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Coupling(string name, Input<string> id, CouplingState? state = null, CustomResourceOptions? options = null)
            : base("heroku:pipeline/coupling:Coupling", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Coupling resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Coupling Get(string name, Input<string> id, CouplingState? state = null, CustomResourceOptions? options = null)
        {
            return new Coupling(name, id, state, options);
        }
    }

    public sealed class CouplingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Heroku app ID (do not use app name)
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The ID of the pipeline to add this app to.
        /// </summary>
        [Input("pipeline", required: true)]
        public Input<string> Pipeline { get; set; } = null!;

        /// <summary>
        /// The stage to couple this app to. Must be one of
        /// `review`, `development`, `staging`, or `production`.
        /// </summary>
        [Input("stage", required: true)]
        public Input<string> Stage { get; set; } = null!;

        public CouplingArgs()
        {
        }
        public static new CouplingArgs Empty => new CouplingArgs();
    }

    public sealed class CouplingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Heroku app ID (do not use app name)
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The ID of the pipeline to add this app to.
        /// </summary>
        [Input("pipeline")]
        public Input<string>? Pipeline { get; set; }

        /// <summary>
        /// The stage to couple this app to. Must be one of
        /// `review`, `development`, `staging`, or `production`.
        /// </summary>
        [Input("stage")]
        public Input<string>? Stage { get; set; }

        public CouplingState()
        {
        }
        public static new CouplingState Empty => new CouplingState();
    }
}
