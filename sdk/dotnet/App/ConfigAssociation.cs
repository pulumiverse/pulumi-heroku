// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Heroku.App
{
    /// <summary>
    /// ## Import
    /// 
    /// This resource defines two config var attributes with one of them used for masking any sensitive/secret variables
    /// 
    /// during a `pulumi preview|apply` in a CI build, terminal, etc. This 'sensitive' distinction for config vars is unique to
    /// 
    /// this provider and not a built-in feature of the Heroku Platform API. Therefore, it will not be possible to import
    /// 
    /// this resource.
    /// 
    /// However, it is safe to define the resource in your configuration file and execute a `pulumi up`
    /// 
    /// as the end result is `noop` when the config vars already exist on the remote resource.
    /// </summary>
    [HerokuResourceType("heroku:app/configAssociation:ConfigAssociation")]
    public partial class ConfigAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Heroku app ID (do not use app name)
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        [Output("sensitiveVars")]
        public Output<ImmutableDictionary<string, string>?> SensitiveVars { get; private set; } = null!;

        /// <summary>
        /// Map of config vars that can be output in plaintext.
        /// </summary>
        [Output("vars")]
        public Output<ImmutableDictionary<string, string>?> Vars { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigAssociation(string name, ConfigAssociationArgs args, CustomResourceOptions? options = null)
            : base("heroku:app/configAssociation:ConfigAssociation", name, args ?? new ConfigAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigAssociation(string name, Input<string> id, ConfigAssociationState? state = null, CustomResourceOptions? options = null)
            : base("heroku:app/configAssociation:ConfigAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "sensitiveVars",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigAssociation Get(string name, Input<string> id, ConfigAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigAssociation(name, id, state, options);
        }
    }

    public sealed class ConfigAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Heroku app ID (do not use app name)
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        [Input("sensitiveVars")]
        private InputMap<string>? _sensitiveVars;
        public InputMap<string> SensitiveVars
        {
            get => _sensitiveVars ?? (_sensitiveVars = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _sensitiveVars = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("vars")]
        private InputMap<string>? _vars;

        /// <summary>
        /// Map of config vars that can be output in plaintext.
        /// </summary>
        public InputMap<string> Vars
        {
            get => _vars ?? (_vars = new InputMap<string>());
            set => _vars = value;
        }

        public ConfigAssociationArgs()
        {
        }
        public static new ConfigAssociationArgs Empty => new ConfigAssociationArgs();
    }

    public sealed class ConfigAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Heroku app ID (do not use app name)
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        [Input("sensitiveVars")]
        private InputMap<string>? _sensitiveVars;
        public InputMap<string> SensitiveVars
        {
            get => _sensitiveVars ?? (_sensitiveVars = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _sensitiveVars = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("vars")]
        private InputMap<string>? _vars;

        /// <summary>
        /// Map of config vars that can be output in plaintext.
        /// </summary>
        public InputMap<string> Vars
        {
            get => _vars ?? (_vars = new InputMap<string>());
            set => _vars = value;
        }

        public ConfigAssociationState()
        {
        }
        public static new ConfigAssociationState Empty => new ConfigAssociationState();
    }
}
