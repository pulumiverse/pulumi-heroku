// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package build

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

type Build struct {
	pulumi.CustomResourceState

	AppId           pulumi.StringOutput      `pulumi:"appId"`
	Buildpacks      pulumi.StringArrayOutput `pulumi:"buildpacks"`
	LocalChecksum   pulumi.StringOutput      `pulumi:"localChecksum"`
	OutputStreamUrl pulumi.StringOutput      `pulumi:"outputStreamUrl"`
	ReleaseId       pulumi.StringOutput      `pulumi:"releaseId"`
	SlugId          pulumi.StringOutput      `pulumi:"slugId"`
	Source          BuildSourceOutput        `pulumi:"source"`
	Stack           pulumi.StringOutput      `pulumi:"stack"`
	Status          pulumi.StringOutput      `pulumi:"status"`
	Users           BuildUserArrayOutput     `pulumi:"users"`
	Uuid            pulumi.StringOutput      `pulumi:"uuid"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOption) (*Build, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Build
	err := ctx.RegisterResource("heroku:build/build:Build", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildState, opts ...pulumi.ResourceOption) (*Build, error) {
	var resource Build
	err := ctx.ReadResource("heroku:build/build:Build", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Build resources.
type buildState struct {
	AppId           *string      `pulumi:"appId"`
	Buildpacks      []string     `pulumi:"buildpacks"`
	LocalChecksum   *string      `pulumi:"localChecksum"`
	OutputStreamUrl *string      `pulumi:"outputStreamUrl"`
	ReleaseId       *string      `pulumi:"releaseId"`
	SlugId          *string      `pulumi:"slugId"`
	Source          *BuildSource `pulumi:"source"`
	Stack           *string      `pulumi:"stack"`
	Status          *string      `pulumi:"status"`
	Users           []BuildUser  `pulumi:"users"`
	Uuid            *string      `pulumi:"uuid"`
}

type BuildState struct {
	AppId           pulumi.StringPtrInput
	Buildpacks      pulumi.StringArrayInput
	LocalChecksum   pulumi.StringPtrInput
	OutputStreamUrl pulumi.StringPtrInput
	ReleaseId       pulumi.StringPtrInput
	SlugId          pulumi.StringPtrInput
	Source          BuildSourcePtrInput
	Stack           pulumi.StringPtrInput
	Status          pulumi.StringPtrInput
	Users           BuildUserArrayInput
	Uuid            pulumi.StringPtrInput
}

func (BuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildState)(nil)).Elem()
}

type buildArgs struct {
	AppId      string      `pulumi:"appId"`
	Buildpacks []string    `pulumi:"buildpacks"`
	Source     BuildSource `pulumi:"source"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	AppId      pulumi.StringInput
	Buildpacks pulumi.StringArrayInput
	Source     BuildSourceInput
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildArgs)(nil)).Elem()
}

type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(ctx context.Context) BuildOutput
}

func (*Build) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *Build) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i *Build) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

// BuildArrayInput is an input type that accepts BuildArray and BuildArrayOutput values.
// You can construct a concrete instance of `BuildArrayInput` via:
//
//	BuildArray{ BuildArgs{...} }
type BuildArrayInput interface {
	pulumi.Input

	ToBuildArrayOutput() BuildArrayOutput
	ToBuildArrayOutputWithContext(context.Context) BuildArrayOutput
}

type BuildArray []BuildInput

func (BuildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Build)(nil)).Elem()
}

func (i BuildArray) ToBuildArrayOutput() BuildArrayOutput {
	return i.ToBuildArrayOutputWithContext(context.Background())
}

func (i BuildArray) ToBuildArrayOutputWithContext(ctx context.Context) BuildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArrayOutput)
}

// BuildMapInput is an input type that accepts BuildMap and BuildMapOutput values.
// You can construct a concrete instance of `BuildMapInput` via:
//
//	BuildMap{ "key": BuildArgs{...} }
type BuildMapInput interface {
	pulumi.Input

	ToBuildMapOutput() BuildMapOutput
	ToBuildMapOutputWithContext(context.Context) BuildMapOutput
}

type BuildMap map[string]BuildInput

func (BuildMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Build)(nil)).Elem()
}

func (i BuildMap) ToBuildMapOutput() BuildMapOutput {
	return i.ToBuildMapOutputWithContext(context.Background())
}

func (i BuildMap) ToBuildMapOutputWithContext(ctx context.Context) BuildMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMapOutput)
}

type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

func (o BuildOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

func (o BuildOutput) Buildpacks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Build) pulumi.StringArrayOutput { return v.Buildpacks }).(pulumi.StringArrayOutput)
}

func (o BuildOutput) LocalChecksum() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.LocalChecksum }).(pulumi.StringOutput)
}

func (o BuildOutput) OutputStreamUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.OutputStreamUrl }).(pulumi.StringOutput)
}

func (o BuildOutput) ReleaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.ReleaseId }).(pulumi.StringOutput)
}

func (o BuildOutput) SlugId() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.SlugId }).(pulumi.StringOutput)
}

func (o BuildOutput) Source() BuildSourceOutput {
	return o.ApplyT(func(v *Build) BuildSourceOutput { return v.Source }).(BuildSourceOutput)
}

func (o BuildOutput) Stack() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Stack }).(pulumi.StringOutput)
}

func (o BuildOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o BuildOutput) Users() BuildUserArrayOutput {
	return o.ApplyT(func(v *Build) BuildUserArrayOutput { return v.Users }).(BuildUserArrayOutput)
}

func (o BuildOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type BuildArrayOutput struct{ *pulumi.OutputState }

func (BuildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Build)(nil)).Elem()
}

func (o BuildArrayOutput) ToBuildArrayOutput() BuildArrayOutput {
	return o
}

func (o BuildArrayOutput) ToBuildArrayOutputWithContext(ctx context.Context) BuildArrayOutput {
	return o
}

func (o BuildArrayOutput) Index(i pulumi.IntInput) BuildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Build {
		return vs[0].([]*Build)[vs[1].(int)]
	}).(BuildOutput)
}

type BuildMapOutput struct{ *pulumi.OutputState }

func (BuildMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Build)(nil)).Elem()
}

func (o BuildMapOutput) ToBuildMapOutput() BuildMapOutput {
	return o
}

func (o BuildMapOutput) ToBuildMapOutputWithContext(ctx context.Context) BuildMapOutput {
	return o
}

func (o BuildMapOutput) MapIndex(k pulumi.StringInput) BuildOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Build {
		return vs[0].(map[string]*Build)[vs[1].(string)]
	}).(BuildOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuildInput)(nil)).Elem(), &Build{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildArrayInput)(nil)).Elem(), BuildArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMapInput)(nil)).Elem(), BuildMap{})
	pulumi.RegisterOutputType(BuildOutput{})
	pulumi.RegisterOutputType(BuildArrayOutput{})
	pulumi.RegisterOutputType(BuildMapOutput{})
}
