// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package team

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

type Collaborator struct {
	pulumi.CustomResourceState

	AppId       pulumi.StringOutput      `pulumi:"appId"`
	Email       pulumi.StringOutput      `pulumi:"email"`
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
}

// NewCollaborator registers a new resource with the given unique name, arguments, and options.
func NewCollaborator(ctx *pulumi.Context,
	name string, args *CollaboratorArgs, opts ...pulumi.ResourceOption) (*Collaborator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Collaborator
	err := ctx.RegisterResource("heroku:team/collaborator:Collaborator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollaborator gets an existing Collaborator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollaborator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollaboratorState, opts ...pulumi.ResourceOption) (*Collaborator, error) {
	var resource Collaborator
	err := ctx.ReadResource("heroku:team/collaborator:Collaborator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Collaborator resources.
type collaboratorState struct {
	AppId       *string  `pulumi:"appId"`
	Email       *string  `pulumi:"email"`
	Permissions []string `pulumi:"permissions"`
}

type CollaboratorState struct {
	AppId       pulumi.StringPtrInput
	Email       pulumi.StringPtrInput
	Permissions pulumi.StringArrayInput
}

func (CollaboratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*collaboratorState)(nil)).Elem()
}

type collaboratorArgs struct {
	AppId       string   `pulumi:"appId"`
	Email       string   `pulumi:"email"`
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a Collaborator resource.
type CollaboratorArgs struct {
	AppId       pulumi.StringInput
	Email       pulumi.StringInput
	Permissions pulumi.StringArrayInput
}

func (CollaboratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collaboratorArgs)(nil)).Elem()
}

type CollaboratorInput interface {
	pulumi.Input

	ToCollaboratorOutput() CollaboratorOutput
	ToCollaboratorOutputWithContext(ctx context.Context) CollaboratorOutput
}

func (*Collaborator) ElementType() reflect.Type {
	return reflect.TypeOf((**Collaborator)(nil)).Elem()
}

func (i *Collaborator) ToCollaboratorOutput() CollaboratorOutput {
	return i.ToCollaboratorOutputWithContext(context.Background())
}

func (i *Collaborator) ToCollaboratorOutputWithContext(ctx context.Context) CollaboratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaboratorOutput)
}

// CollaboratorArrayInput is an input type that accepts CollaboratorArray and CollaboratorArrayOutput values.
// You can construct a concrete instance of `CollaboratorArrayInput` via:
//
//	CollaboratorArray{ CollaboratorArgs{...} }
type CollaboratorArrayInput interface {
	pulumi.Input

	ToCollaboratorArrayOutput() CollaboratorArrayOutput
	ToCollaboratorArrayOutputWithContext(context.Context) CollaboratorArrayOutput
}

type CollaboratorArray []CollaboratorInput

func (CollaboratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Collaborator)(nil)).Elem()
}

func (i CollaboratorArray) ToCollaboratorArrayOutput() CollaboratorArrayOutput {
	return i.ToCollaboratorArrayOutputWithContext(context.Background())
}

func (i CollaboratorArray) ToCollaboratorArrayOutputWithContext(ctx context.Context) CollaboratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaboratorArrayOutput)
}

// CollaboratorMapInput is an input type that accepts CollaboratorMap and CollaboratorMapOutput values.
// You can construct a concrete instance of `CollaboratorMapInput` via:
//
//	CollaboratorMap{ "key": CollaboratorArgs{...} }
type CollaboratorMapInput interface {
	pulumi.Input

	ToCollaboratorMapOutput() CollaboratorMapOutput
	ToCollaboratorMapOutputWithContext(context.Context) CollaboratorMapOutput
}

type CollaboratorMap map[string]CollaboratorInput

func (CollaboratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Collaborator)(nil)).Elem()
}

func (i CollaboratorMap) ToCollaboratorMapOutput() CollaboratorMapOutput {
	return i.ToCollaboratorMapOutputWithContext(context.Background())
}

func (i CollaboratorMap) ToCollaboratorMapOutputWithContext(ctx context.Context) CollaboratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaboratorMapOutput)
}

type CollaboratorOutput struct{ *pulumi.OutputState }

func (CollaboratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Collaborator)(nil)).Elem()
}

func (o CollaboratorOutput) ToCollaboratorOutput() CollaboratorOutput {
	return o
}

func (o CollaboratorOutput) ToCollaboratorOutputWithContext(ctx context.Context) CollaboratorOutput {
	return o
}

func (o CollaboratorOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Collaborator) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

func (o CollaboratorOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Collaborator) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

func (o CollaboratorOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Collaborator) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

type CollaboratorArrayOutput struct{ *pulumi.OutputState }

func (CollaboratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Collaborator)(nil)).Elem()
}

func (o CollaboratorArrayOutput) ToCollaboratorArrayOutput() CollaboratorArrayOutput {
	return o
}

func (o CollaboratorArrayOutput) ToCollaboratorArrayOutputWithContext(ctx context.Context) CollaboratorArrayOutput {
	return o
}

func (o CollaboratorArrayOutput) Index(i pulumi.IntInput) CollaboratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Collaborator {
		return vs[0].([]*Collaborator)[vs[1].(int)]
	}).(CollaboratorOutput)
}

type CollaboratorMapOutput struct{ *pulumi.OutputState }

func (CollaboratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Collaborator)(nil)).Elem()
}

func (o CollaboratorMapOutput) ToCollaboratorMapOutput() CollaboratorMapOutput {
	return o
}

func (o CollaboratorMapOutput) ToCollaboratorMapOutputWithContext(ctx context.Context) CollaboratorMapOutput {
	return o
}

func (o CollaboratorMapOutput) MapIndex(k pulumi.StringInput) CollaboratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Collaborator {
		return vs[0].(map[string]*Collaborator)[vs[1].(string)]
	}).(CollaboratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollaboratorInput)(nil)).Elem(), &Collaborator{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaboratorArrayInput)(nil)).Elem(), CollaboratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaboratorMapInput)(nil)).Elem(), CollaboratorMap{})
	pulumi.RegisterOutputType(CollaboratorOutput{})
	pulumi.RegisterOutputType(CollaboratorArrayOutput{})
	pulumi.RegisterOutputType(CollaboratorMapOutput{})
}
