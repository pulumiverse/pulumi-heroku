// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package addon

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

// Use this data source to get information about a Heroku Addon.
//
// ## Example Usage
func LookupAddon(ctx *pulumi.Context, args *LookupAddonArgs, opts ...pulumi.InvokeOption) (*LookupAddonResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAddonResult
	err := ctx.Invoke("heroku:addon/getAddon:getAddon", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAddon.
type LookupAddonArgs struct {
	// The add-on name
	Name string `pulumi:"name"`
}

// A collection of values returned by getAddon.
type LookupAddonResult struct {
	// Heroku app ID
	AppId string `pulumi:"appId"`
	// The Configuration variables of the add-on
	ConfigVars []string `pulumi:"configVars"`
	// The ID of the add-on
	Id string `pulumi:"id"`
	// The add-on name
	Name string `pulumi:"name"`
	// The plan name
	Plan string `pulumi:"plan"`
	// The ID of the plan provider
	ProviderId string `pulumi:"providerId"`
}

func LookupAddonOutput(ctx *pulumi.Context, args LookupAddonOutputArgs, opts ...pulumi.InvokeOption) LookupAddonResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAddonResultOutput, error) {
			args := v.(LookupAddonArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("heroku:addon/getAddon:getAddon", args, LookupAddonResultOutput{}, options).(LookupAddonResultOutput), nil
		}).(LookupAddonResultOutput)
}

// A collection of arguments for invoking getAddon.
type LookupAddonOutputArgs struct {
	// The add-on name
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupAddonOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddonArgs)(nil)).Elem()
}

// A collection of values returned by getAddon.
type LookupAddonResultOutput struct{ *pulumi.OutputState }

func (LookupAddonResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddonResult)(nil)).Elem()
}

func (o LookupAddonResultOutput) ToLookupAddonResultOutput() LookupAddonResultOutput {
	return o
}

func (o LookupAddonResultOutput) ToLookupAddonResultOutputWithContext(ctx context.Context) LookupAddonResultOutput {
	return o
}

// Heroku app ID
func (o LookupAddonResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.AppId }).(pulumi.StringOutput)
}

// The Configuration variables of the add-on
func (o LookupAddonResultOutput) ConfigVars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAddonResult) []string { return v.ConfigVars }).(pulumi.StringArrayOutput)
}

// The ID of the add-on
func (o LookupAddonResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Id }).(pulumi.StringOutput)
}

// The add-on name
func (o LookupAddonResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Name }).(pulumi.StringOutput)
}

// The plan name
func (o LookupAddonResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Plan }).(pulumi.StringOutput)
}

// The ID of the plan provider
func (o LookupAddonResultOutput) ProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.ProviderId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAddonResultOutput{})
}
