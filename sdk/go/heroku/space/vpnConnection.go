// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package space

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

// Provides a resource for creating a VPN connection between a network and a Heroku Private Space. For more information, see [Private Spaces VPN Connection](https://devcenter.heroku.com/articles/private-space-vpn-connection?preview=1) in the Heroku DevCenter.
//
// ## Example Usage
type VpnConnection struct {
	pulumi.CustomResourceState

	// The IKE version used to setup the IPsec tunnel.
	IkeVersion pulumi.IntOutput `pulumi:"ikeVersion"`
	// The name of the VPN connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The public IP address of the VPN endpoint on the network where the VPN connection will be established.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
	RoutableCidrs pulumi.StringArrayOutput `pulumi:"routableCidrs"`
	// The ID of the Heroku Private Space where the VPN connection will be established.
	Space pulumi.StringOutput `pulumi:"space"`
	// The CIDR block for the Heroku Private Space. The network where the VPN will be established should be configured to route traffic destined for this CIDR block over the VPN link.
	SpaceCidrBlock pulumi.StringOutput `pulumi:"spaceCidrBlock"`
	// Details about each VPN tunnel endpoint.
	Tunnels VpnConnectionTunnelArrayOutput `pulumi:"tunnels"`
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicIp == nil {
		return nil, errors.New("invalid value for required argument 'PublicIp'")
	}
	if args.RoutableCidrs == nil {
		return nil, errors.New("invalid value for required argument 'RoutableCidrs'")
	}
	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnConnection
	err := ctx.RegisterResource("heroku:space/vpnConnection:VpnConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionState, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	var resource VpnConnection
	err := ctx.ReadResource("heroku:space/vpnConnection:VpnConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnection resources.
type vpnConnectionState struct {
	// The IKE version used to setup the IPsec tunnel.
	IkeVersion *int `pulumi:"ikeVersion"`
	// The name of the VPN connection.
	Name *string `pulumi:"name"`
	// The public IP address of the VPN endpoint on the network where the VPN connection will be established.
	PublicIp *string `pulumi:"publicIp"`
	// A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
	RoutableCidrs []string `pulumi:"routableCidrs"`
	// The ID of the Heroku Private Space where the VPN connection will be established.
	Space *string `pulumi:"space"`
	// The CIDR block for the Heroku Private Space. The network where the VPN will be established should be configured to route traffic destined for this CIDR block over the VPN link.
	SpaceCidrBlock *string `pulumi:"spaceCidrBlock"`
	// Details about each VPN tunnel endpoint.
	Tunnels []VpnConnectionTunnel `pulumi:"tunnels"`
}

type VpnConnectionState struct {
	// The IKE version used to setup the IPsec tunnel.
	IkeVersion pulumi.IntPtrInput
	// The name of the VPN connection.
	Name pulumi.StringPtrInput
	// The public IP address of the VPN endpoint on the network where the VPN connection will be established.
	PublicIp pulumi.StringPtrInput
	// A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
	RoutableCidrs pulumi.StringArrayInput
	// The ID of the Heroku Private Space where the VPN connection will be established.
	Space pulumi.StringPtrInput
	// The CIDR block for the Heroku Private Space. The network where the VPN will be established should be configured to route traffic destined for this CIDR block over the VPN link.
	SpaceCidrBlock pulumi.StringPtrInput
	// Details about each VPN tunnel endpoint.
	Tunnels VpnConnectionTunnelArrayInput
}

func (VpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionState)(nil)).Elem()
}

type vpnConnectionArgs struct {
	// The name of the VPN connection.
	Name *string `pulumi:"name"`
	// The public IP address of the VPN endpoint on the network where the VPN connection will be established.
	PublicIp string `pulumi:"publicIp"`
	// A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
	RoutableCidrs []string `pulumi:"routableCidrs"`
	// The ID of the Heroku Private Space where the VPN connection will be established.
	Space string `pulumi:"space"`
	// Details about each VPN tunnel endpoint.
	Tunnels []VpnConnectionTunnel `pulumi:"tunnels"`
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	// The name of the VPN connection.
	Name pulumi.StringPtrInput
	// The public IP address of the VPN endpoint on the network where the VPN connection will be established.
	PublicIp pulumi.StringInput
	// A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
	RoutableCidrs pulumi.StringArrayInput
	// The ID of the Heroku Private Space where the VPN connection will be established.
	Space pulumi.StringInput
	// Details about each VPN tunnel endpoint.
	Tunnels VpnConnectionTunnelArrayInput
}

func (VpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionArgs)(nil)).Elem()
}

type VpnConnectionInput interface {
	pulumi.Input

	ToVpnConnectionOutput() VpnConnectionOutput
	ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput
}

func (*VpnConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (i *VpnConnection) ToVpnConnectionOutput() VpnConnectionOutput {
	return i.ToVpnConnectionOutputWithContext(context.Background())
}

func (i *VpnConnection) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionOutput)
}

// VpnConnectionArrayInput is an input type that accepts VpnConnectionArray and VpnConnectionArrayOutput values.
// You can construct a concrete instance of `VpnConnectionArrayInput` via:
//
//	VpnConnectionArray{ VpnConnectionArgs{...} }
type VpnConnectionArrayInput interface {
	pulumi.Input

	ToVpnConnectionArrayOutput() VpnConnectionArrayOutput
	ToVpnConnectionArrayOutputWithContext(context.Context) VpnConnectionArrayOutput
}

type VpnConnectionArray []VpnConnectionInput

func (VpnConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return i.ToVpnConnectionArrayOutputWithContext(context.Background())
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionArrayOutput)
}

// VpnConnectionMapInput is an input type that accepts VpnConnectionMap and VpnConnectionMapOutput values.
// You can construct a concrete instance of `VpnConnectionMapInput` via:
//
//	VpnConnectionMap{ "key": VpnConnectionArgs{...} }
type VpnConnectionMapInput interface {
	pulumi.Input

	ToVpnConnectionMapOutput() VpnConnectionMapOutput
	ToVpnConnectionMapOutputWithContext(context.Context) VpnConnectionMapOutput
}

type VpnConnectionMap map[string]VpnConnectionInput

func (VpnConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionMap) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return i.ToVpnConnectionMapOutputWithContext(context.Background())
}

func (i VpnConnectionMap) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionMapOutput)
}

type VpnConnectionOutput struct{ *pulumi.OutputState }

func (VpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (o VpnConnectionOutput) ToVpnConnectionOutput() VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return o
}

// The IKE version used to setup the IPsec tunnel.
func (o VpnConnectionOutput) IkeVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.IntOutput { return v.IkeVersion }).(pulumi.IntOutput)
}

// The name of the VPN connection.
func (o VpnConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The public IP address of the VPN endpoint on the network where the VPN connection will be established.
func (o VpnConnectionOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// A list of IPv4 CIDR blocks used by the network where the VPN connection will be established.
func (o VpnConnectionOutput) RoutableCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringArrayOutput { return v.RoutableCidrs }).(pulumi.StringArrayOutput)
}

// The ID of the Heroku Private Space where the VPN connection will be established.
func (o VpnConnectionOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

// The CIDR block for the Heroku Private Space. The network where the VPN will be established should be configured to route traffic destined for this CIDR block over the VPN link.
func (o VpnConnectionOutput) SpaceCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.SpaceCidrBlock }).(pulumi.StringOutput)
}

// Details about each VPN tunnel endpoint.
func (o VpnConnectionOutput) Tunnels() VpnConnectionTunnelArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionTunnelArrayOutput { return v.Tunnels }).(VpnConnectionTunnelArrayOutput)
}

type VpnConnectionArrayOutput struct{ *pulumi.OutputState }

func (VpnConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) Index(i pulumi.IntInput) VpnConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].([]*VpnConnection)[vs[1].(int)]
	}).(VpnConnectionOutput)
}

type VpnConnectionMapOutput struct{ *pulumi.OutputState }

func (VpnConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) MapIndex(k pulumi.StringInput) VpnConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].(map[string]*VpnConnection)[vs[1].(string)]
	}).(VpnConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionInput)(nil)).Elem(), &VpnConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionArrayInput)(nil)).Elem(), VpnConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionMapInput)(nil)).Elem(), VpnConnectionMap{})
	pulumi.RegisterOutputType(VpnConnectionOutput{})
	pulumi.RegisterOutputType(VpnConnectionArrayOutput{})
	pulumi.RegisterOutputType(VpnConnectionMapOutput{})
}
