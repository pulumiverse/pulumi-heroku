// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package space

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

type InboundRuleset struct {
	pulumi.CustomResourceState

	Rules InboundRulesetRuleArrayOutput `pulumi:"rules"`
	Space pulumi.StringOutput           `pulumi:"space"`
}

// NewInboundRuleset registers a new resource with the given unique name, arguments, and options.
func NewInboundRuleset(ctx *pulumi.Context,
	name string, args *InboundRulesetArgs, opts ...pulumi.ResourceOption) (*InboundRuleset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InboundRuleset
	err := ctx.RegisterResource("heroku:space/inboundRuleset:InboundRuleset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInboundRuleset gets an existing InboundRuleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInboundRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InboundRulesetState, opts ...pulumi.ResourceOption) (*InboundRuleset, error) {
	var resource InboundRuleset
	err := ctx.ReadResource("heroku:space/inboundRuleset:InboundRuleset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InboundRuleset resources.
type inboundRulesetState struct {
	Rules []InboundRulesetRule `pulumi:"rules"`
	Space *string              `pulumi:"space"`
}

type InboundRulesetState struct {
	Rules InboundRulesetRuleArrayInput
	Space pulumi.StringPtrInput
}

func (InboundRulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*inboundRulesetState)(nil)).Elem()
}

type inboundRulesetArgs struct {
	Rules []InboundRulesetRule `pulumi:"rules"`
	Space string               `pulumi:"space"`
}

// The set of arguments for constructing a InboundRuleset resource.
type InboundRulesetArgs struct {
	Rules InboundRulesetRuleArrayInput
	Space pulumi.StringInput
}

func (InboundRulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inboundRulesetArgs)(nil)).Elem()
}

type InboundRulesetInput interface {
	pulumi.Input

	ToInboundRulesetOutput() InboundRulesetOutput
	ToInboundRulesetOutputWithContext(ctx context.Context) InboundRulesetOutput
}

func (*InboundRuleset) ElementType() reflect.Type {
	return reflect.TypeOf((**InboundRuleset)(nil)).Elem()
}

func (i *InboundRuleset) ToInboundRulesetOutput() InboundRulesetOutput {
	return i.ToInboundRulesetOutputWithContext(context.Background())
}

func (i *InboundRuleset) ToInboundRulesetOutputWithContext(ctx context.Context) InboundRulesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundRulesetOutput)
}

// InboundRulesetArrayInput is an input type that accepts InboundRulesetArray and InboundRulesetArrayOutput values.
// You can construct a concrete instance of `InboundRulesetArrayInput` via:
//
//	InboundRulesetArray{ InboundRulesetArgs{...} }
type InboundRulesetArrayInput interface {
	pulumi.Input

	ToInboundRulesetArrayOutput() InboundRulesetArrayOutput
	ToInboundRulesetArrayOutputWithContext(context.Context) InboundRulesetArrayOutput
}

type InboundRulesetArray []InboundRulesetInput

func (InboundRulesetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InboundRuleset)(nil)).Elem()
}

func (i InboundRulesetArray) ToInboundRulesetArrayOutput() InboundRulesetArrayOutput {
	return i.ToInboundRulesetArrayOutputWithContext(context.Background())
}

func (i InboundRulesetArray) ToInboundRulesetArrayOutputWithContext(ctx context.Context) InboundRulesetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundRulesetArrayOutput)
}

// InboundRulesetMapInput is an input type that accepts InboundRulesetMap and InboundRulesetMapOutput values.
// You can construct a concrete instance of `InboundRulesetMapInput` via:
//
//	InboundRulesetMap{ "key": InboundRulesetArgs{...} }
type InboundRulesetMapInput interface {
	pulumi.Input

	ToInboundRulesetMapOutput() InboundRulesetMapOutput
	ToInboundRulesetMapOutputWithContext(context.Context) InboundRulesetMapOutput
}

type InboundRulesetMap map[string]InboundRulesetInput

func (InboundRulesetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InboundRuleset)(nil)).Elem()
}

func (i InboundRulesetMap) ToInboundRulesetMapOutput() InboundRulesetMapOutput {
	return i.ToInboundRulesetMapOutputWithContext(context.Background())
}

func (i InboundRulesetMap) ToInboundRulesetMapOutputWithContext(ctx context.Context) InboundRulesetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundRulesetMapOutput)
}

type InboundRulesetOutput struct{ *pulumi.OutputState }

func (InboundRulesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InboundRuleset)(nil)).Elem()
}

func (o InboundRulesetOutput) ToInboundRulesetOutput() InboundRulesetOutput {
	return o
}

func (o InboundRulesetOutput) ToInboundRulesetOutputWithContext(ctx context.Context) InboundRulesetOutput {
	return o
}

func (o InboundRulesetOutput) Rules() InboundRulesetRuleArrayOutput {
	return o.ApplyT(func(v *InboundRuleset) InboundRulesetRuleArrayOutput { return v.Rules }).(InboundRulesetRuleArrayOutput)
}

func (o InboundRulesetOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *InboundRuleset) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

type InboundRulesetArrayOutput struct{ *pulumi.OutputState }

func (InboundRulesetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InboundRuleset)(nil)).Elem()
}

func (o InboundRulesetArrayOutput) ToInboundRulesetArrayOutput() InboundRulesetArrayOutput {
	return o
}

func (o InboundRulesetArrayOutput) ToInboundRulesetArrayOutputWithContext(ctx context.Context) InboundRulesetArrayOutput {
	return o
}

func (o InboundRulesetArrayOutput) Index(i pulumi.IntInput) InboundRulesetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InboundRuleset {
		return vs[0].([]*InboundRuleset)[vs[1].(int)]
	}).(InboundRulesetOutput)
}

type InboundRulesetMapOutput struct{ *pulumi.OutputState }

func (InboundRulesetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InboundRuleset)(nil)).Elem()
}

func (o InboundRulesetMapOutput) ToInboundRulesetMapOutput() InboundRulesetMapOutput {
	return o
}

func (o InboundRulesetMapOutput) ToInboundRulesetMapOutputWithContext(ctx context.Context) InboundRulesetMapOutput {
	return o
}

func (o InboundRulesetMapOutput) MapIndex(k pulumi.StringInput) InboundRulesetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InboundRuleset {
		return vs[0].(map[string]*InboundRuleset)[vs[1].(string)]
	}).(InboundRulesetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InboundRulesetInput)(nil)).Elem(), &InboundRuleset{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundRulesetArrayInput)(nil)).Elem(), InboundRulesetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InboundRulesetMapInput)(nil)).Elem(), InboundRulesetMap{})
	pulumi.RegisterOutputType(InboundRulesetOutput{})
	pulumi.RegisterOutputType(InboundRulesetArrayOutput{})
	pulumi.RegisterOutputType(InboundRulesetMapOutput{})
}
