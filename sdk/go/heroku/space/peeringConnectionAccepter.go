// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package space

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

type PeeringConnectionAccepter struct {
	pulumi.CustomResourceState

	Space                  pulumi.StringOutput `pulumi:"space"`
	Status                 pulumi.StringOutput `pulumi:"status"`
	Type                   pulumi.StringOutput `pulumi:"type"`
	VpcPeeringConnectionId pulumi.StringOutput `pulumi:"vpcPeeringConnectionId"`
}

// NewPeeringConnectionAccepter registers a new resource with the given unique name, arguments, and options.
func NewPeeringConnectionAccepter(ctx *pulumi.Context,
	name string, args *PeeringConnectionAccepterArgs, opts ...pulumi.ResourceOption) (*PeeringConnectionAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	if args.VpcPeeringConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpcPeeringConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PeeringConnectionAccepter
	err := ctx.RegisterResource("heroku:space/peeringConnectionAccepter:PeeringConnectionAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringConnectionAccepter gets an existing PeeringConnectionAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringConnectionAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringConnectionAccepterState, opts ...pulumi.ResourceOption) (*PeeringConnectionAccepter, error) {
	var resource PeeringConnectionAccepter
	err := ctx.ReadResource("heroku:space/peeringConnectionAccepter:PeeringConnectionAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringConnectionAccepter resources.
type peeringConnectionAccepterState struct {
	Space                  *string `pulumi:"space"`
	Status                 *string `pulumi:"status"`
	Type                   *string `pulumi:"type"`
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

type PeeringConnectionAccepterState struct {
	Space                  pulumi.StringPtrInput
	Status                 pulumi.StringPtrInput
	Type                   pulumi.StringPtrInput
	VpcPeeringConnectionId pulumi.StringPtrInput
}

func (PeeringConnectionAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringConnectionAccepterState)(nil)).Elem()
}

type peeringConnectionAccepterArgs struct {
	Space                  string `pulumi:"space"`
	VpcPeeringConnectionId string `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a PeeringConnectionAccepter resource.
type PeeringConnectionAccepterArgs struct {
	Space                  pulumi.StringInput
	VpcPeeringConnectionId pulumi.StringInput
}

func (PeeringConnectionAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringConnectionAccepterArgs)(nil)).Elem()
}

type PeeringConnectionAccepterInput interface {
	pulumi.Input

	ToPeeringConnectionAccepterOutput() PeeringConnectionAccepterOutput
	ToPeeringConnectionAccepterOutputWithContext(ctx context.Context) PeeringConnectionAccepterOutput
}

func (*PeeringConnectionAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringConnectionAccepter)(nil)).Elem()
}

func (i *PeeringConnectionAccepter) ToPeeringConnectionAccepterOutput() PeeringConnectionAccepterOutput {
	return i.ToPeeringConnectionAccepterOutputWithContext(context.Background())
}

func (i *PeeringConnectionAccepter) ToPeeringConnectionAccepterOutputWithContext(ctx context.Context) PeeringConnectionAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionAccepterOutput)
}

// PeeringConnectionAccepterArrayInput is an input type that accepts PeeringConnectionAccepterArray and PeeringConnectionAccepterArrayOutput values.
// You can construct a concrete instance of `PeeringConnectionAccepterArrayInput` via:
//
//	PeeringConnectionAccepterArray{ PeeringConnectionAccepterArgs{...} }
type PeeringConnectionAccepterArrayInput interface {
	pulumi.Input

	ToPeeringConnectionAccepterArrayOutput() PeeringConnectionAccepterArrayOutput
	ToPeeringConnectionAccepterArrayOutputWithContext(context.Context) PeeringConnectionAccepterArrayOutput
}

type PeeringConnectionAccepterArray []PeeringConnectionAccepterInput

func (PeeringConnectionAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeringConnectionAccepter)(nil)).Elem()
}

func (i PeeringConnectionAccepterArray) ToPeeringConnectionAccepterArrayOutput() PeeringConnectionAccepterArrayOutput {
	return i.ToPeeringConnectionAccepterArrayOutputWithContext(context.Background())
}

func (i PeeringConnectionAccepterArray) ToPeeringConnectionAccepterArrayOutputWithContext(ctx context.Context) PeeringConnectionAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionAccepterArrayOutput)
}

// PeeringConnectionAccepterMapInput is an input type that accepts PeeringConnectionAccepterMap and PeeringConnectionAccepterMapOutput values.
// You can construct a concrete instance of `PeeringConnectionAccepterMapInput` via:
//
//	PeeringConnectionAccepterMap{ "key": PeeringConnectionAccepterArgs{...} }
type PeeringConnectionAccepterMapInput interface {
	pulumi.Input

	ToPeeringConnectionAccepterMapOutput() PeeringConnectionAccepterMapOutput
	ToPeeringConnectionAccepterMapOutputWithContext(context.Context) PeeringConnectionAccepterMapOutput
}

type PeeringConnectionAccepterMap map[string]PeeringConnectionAccepterInput

func (PeeringConnectionAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeringConnectionAccepter)(nil)).Elem()
}

func (i PeeringConnectionAccepterMap) ToPeeringConnectionAccepterMapOutput() PeeringConnectionAccepterMapOutput {
	return i.ToPeeringConnectionAccepterMapOutputWithContext(context.Background())
}

func (i PeeringConnectionAccepterMap) ToPeeringConnectionAccepterMapOutputWithContext(ctx context.Context) PeeringConnectionAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionAccepterMapOutput)
}

type PeeringConnectionAccepterOutput struct{ *pulumi.OutputState }

func (PeeringConnectionAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringConnectionAccepter)(nil)).Elem()
}

func (o PeeringConnectionAccepterOutput) ToPeeringConnectionAccepterOutput() PeeringConnectionAccepterOutput {
	return o
}

func (o PeeringConnectionAccepterOutput) ToPeeringConnectionAccepterOutputWithContext(ctx context.Context) PeeringConnectionAccepterOutput {
	return o
}

func (o PeeringConnectionAccepterOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnectionAccepter) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

func (o PeeringConnectionAccepterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnectionAccepter) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PeeringConnectionAccepterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnectionAccepter) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o PeeringConnectionAccepterOutput) VpcPeeringConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnectionAccepter) pulumi.StringOutput { return v.VpcPeeringConnectionId }).(pulumi.StringOutput)
}

type PeeringConnectionAccepterArrayOutput struct{ *pulumi.OutputState }

func (PeeringConnectionAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeringConnectionAccepter)(nil)).Elem()
}

func (o PeeringConnectionAccepterArrayOutput) ToPeeringConnectionAccepterArrayOutput() PeeringConnectionAccepterArrayOutput {
	return o
}

func (o PeeringConnectionAccepterArrayOutput) ToPeeringConnectionAccepterArrayOutputWithContext(ctx context.Context) PeeringConnectionAccepterArrayOutput {
	return o
}

func (o PeeringConnectionAccepterArrayOutput) Index(i pulumi.IntInput) PeeringConnectionAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PeeringConnectionAccepter {
		return vs[0].([]*PeeringConnectionAccepter)[vs[1].(int)]
	}).(PeeringConnectionAccepterOutput)
}

type PeeringConnectionAccepterMapOutput struct{ *pulumi.OutputState }

func (PeeringConnectionAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeringConnectionAccepter)(nil)).Elem()
}

func (o PeeringConnectionAccepterMapOutput) ToPeeringConnectionAccepterMapOutput() PeeringConnectionAccepterMapOutput {
	return o
}

func (o PeeringConnectionAccepterMapOutput) ToPeeringConnectionAccepterMapOutputWithContext(ctx context.Context) PeeringConnectionAccepterMapOutput {
	return o
}

func (o PeeringConnectionAccepterMapOutput) MapIndex(k pulumi.StringInput) PeeringConnectionAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PeeringConnectionAccepter {
		return vs[0].(map[string]*PeeringConnectionAccepter)[vs[1].(string)]
	}).(PeeringConnectionAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionAccepterInput)(nil)).Elem(), &PeeringConnectionAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionAccepterArrayInput)(nil)).Elem(), PeeringConnectionAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionAccepterMapInput)(nil)).Elem(), PeeringConnectionAccepterMap{})
	pulumi.RegisterOutputType(PeeringConnectionAccepterOutput{})
	pulumi.RegisterOutputType(PeeringConnectionAccepterArrayOutput{})
	pulumi.RegisterOutputType(PeeringConnectionAccepterMapOutput{})
}
