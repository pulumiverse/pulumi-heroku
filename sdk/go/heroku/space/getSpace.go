// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package space

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

// Use this data source to get information about a [Heroku Private Space](https://www.heroku.com/private-spaces).
//
// ## Example Usage
func LookupSpace(ctx *pulumi.Context, args *LookupSpaceArgs, opts ...pulumi.InvokeOption) (*LookupSpaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSpaceResult
	err := ctx.Invoke("heroku:space/getSpace:getSpace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSpace.
type LookupSpaceArgs struct {
	// The RFC-1918 CIDR the Private Space will use. It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
	Cidr *string `pulumi:"cidr"`
	// The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
	DataCidr *string `pulumi:"dataCidr"`
	// The name of the Heroku Private Space.
	Name string `pulumi:"name"`
}

// A collection of values returned by getSpace.
type LookupSpaceResult struct {
	// The RFC-1918 CIDR the Private Space will use. It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
	Cidr string `pulumi:"cidr"`
	// The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
	DataCidr string `pulumi:"dataCidr"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (string) - The name of the Heroku Team.
	Name string `pulumi:"name"`
	// The Heroku Team that owns this space. The fields for this block are documented below.
	Organization string `pulumi:"organization"`
	// The space's stable outbound [NAT IPs](https://devcenter.heroku.com/articles/platform-api-reference#space-network-address-translation).
	OutboundIps []string `pulumi:"outboundIps"`
	// The region in which the Heroku Private Space is deployed.
	Region string `pulumi:"region"`
	// Whether or not the space has [Shield](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces) turned on. One of `on` or `off`.
	Shield bool `pulumi:"shield"`
	// The state of the Heroku Private Space. Either `allocating` or `allocated`.
	State string `pulumi:"state"`
	// The space's unique ID.
	Uuid string `pulumi:"uuid"`
}

func LookupSpaceOutput(ctx *pulumi.Context, args LookupSpaceOutputArgs, opts ...pulumi.InvokeOption) LookupSpaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSpaceResultOutput, error) {
			args := v.(LookupSpaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("heroku:space/getSpace:getSpace", args, LookupSpaceResultOutput{}, options).(LookupSpaceResultOutput), nil
		}).(LookupSpaceResultOutput)
}

// A collection of arguments for invoking getSpace.
type LookupSpaceOutputArgs struct {
	// The RFC-1918 CIDR the Private Space will use. It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
	DataCidr pulumi.StringPtrInput `pulumi:"dataCidr"`
	// The name of the Heroku Private Space.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupSpaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpaceArgs)(nil)).Elem()
}

// A collection of values returned by getSpace.
type LookupSpaceResultOutput struct{ *pulumi.OutputState }

func (LookupSpaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpaceResult)(nil)).Elem()
}

func (o LookupSpaceResultOutput) ToLookupSpaceResultOutput() LookupSpaceResultOutput {
	return o
}

func (o LookupSpaceResultOutput) ToLookupSpaceResultOutputWithContext(ctx context.Context) LookupSpaceResultOutput {
	return o
}

// The RFC-1918 CIDR the Private Space will use. It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
func (o LookupSpaceResultOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpaceResult) string { return v.Cidr }).(pulumi.StringOutput)
}

// The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
func (o LookupSpaceResultOutput) DataCidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpaceResult) string { return v.DataCidr }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSpaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// (string) - The name of the Heroku Team.
func (o LookupSpaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpaceResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Heroku Team that owns this space. The fields for this block are documented below.
func (o LookupSpaceResultOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpaceResult) string { return v.Organization }).(pulumi.StringOutput)
}

// The space's stable outbound [NAT IPs](https://devcenter.heroku.com/articles/platform-api-reference#space-network-address-translation).
func (o LookupSpaceResultOutput) OutboundIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSpaceResult) []string { return v.OutboundIps }).(pulumi.StringArrayOutput)
}

// The region in which the Heroku Private Space is deployed.
func (o LookupSpaceResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpaceResult) string { return v.Region }).(pulumi.StringOutput)
}

// Whether or not the space has [Shield](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces) turned on. One of `on` or `off`.
func (o LookupSpaceResultOutput) Shield() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSpaceResult) bool { return v.Shield }).(pulumi.BoolOutput)
}

// The state of the Heroku Private Space. Either `allocating` or `allocated`.
func (o LookupSpaceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpaceResult) string { return v.State }).(pulumi.StringOutput)
}

// The space's unique ID.
func (o LookupSpaceResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpaceResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSpaceResultOutput{})
}
