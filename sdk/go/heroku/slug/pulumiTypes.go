// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package slug

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

var _ = internal.GetEnvOrDefault

type SlugBlob struct {
	// HTTP method to upload the archive
	Method *string `pulumi:"method"`
	// Pre-signed, expiring URL to upload the archive
	Url *string `pulumi:"url"`
}

// SlugBlobInput is an input type that accepts SlugBlobArgs and SlugBlobOutput values.
// You can construct a concrete instance of `SlugBlobInput` via:
//
//	SlugBlobArgs{...}
type SlugBlobInput interface {
	pulumi.Input

	ToSlugBlobOutput() SlugBlobOutput
	ToSlugBlobOutputWithContext(context.Context) SlugBlobOutput
}

type SlugBlobArgs struct {
	// HTTP method to upload the archive
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Pre-signed, expiring URL to upload the archive
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (SlugBlobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SlugBlob)(nil)).Elem()
}

func (i SlugBlobArgs) ToSlugBlobOutput() SlugBlobOutput {
	return i.ToSlugBlobOutputWithContext(context.Background())
}

func (i SlugBlobArgs) ToSlugBlobOutputWithContext(ctx context.Context) SlugBlobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlugBlobOutput)
}

// SlugBlobArrayInput is an input type that accepts SlugBlobArray and SlugBlobArrayOutput values.
// You can construct a concrete instance of `SlugBlobArrayInput` via:
//
//	SlugBlobArray{ SlugBlobArgs{...} }
type SlugBlobArrayInput interface {
	pulumi.Input

	ToSlugBlobArrayOutput() SlugBlobArrayOutput
	ToSlugBlobArrayOutputWithContext(context.Context) SlugBlobArrayOutput
}

type SlugBlobArray []SlugBlobInput

func (SlugBlobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlugBlob)(nil)).Elem()
}

func (i SlugBlobArray) ToSlugBlobArrayOutput() SlugBlobArrayOutput {
	return i.ToSlugBlobArrayOutputWithContext(context.Background())
}

func (i SlugBlobArray) ToSlugBlobArrayOutputWithContext(ctx context.Context) SlugBlobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlugBlobArrayOutput)
}

type SlugBlobOutput struct{ *pulumi.OutputState }

func (SlugBlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SlugBlob)(nil)).Elem()
}

func (o SlugBlobOutput) ToSlugBlobOutput() SlugBlobOutput {
	return o
}

func (o SlugBlobOutput) ToSlugBlobOutputWithContext(ctx context.Context) SlugBlobOutput {
	return o
}

// HTTP method to upload the archive
func (o SlugBlobOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlugBlob) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Pre-signed, expiring URL to upload the archive
func (o SlugBlobOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SlugBlob) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SlugBlobArrayOutput struct{ *pulumi.OutputState }

func (SlugBlobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SlugBlob)(nil)).Elem()
}

func (o SlugBlobArrayOutput) ToSlugBlobArrayOutput() SlugBlobArrayOutput {
	return o
}

func (o SlugBlobArrayOutput) ToSlugBlobArrayOutputWithContext(ctx context.Context) SlugBlobArrayOutput {
	return o
}

func (o SlugBlobArrayOutput) Index(i pulumi.IntInput) SlugBlobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SlugBlob {
		return vs[0].([]SlugBlob)[vs[1].(int)]
	}).(SlugBlobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlugBlobInput)(nil)).Elem(), SlugBlobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlugBlobArrayInput)(nil)).Elem(), SlugBlobArray{})
	pulumi.RegisterOutputType(SlugBlobOutput{})
	pulumi.RegisterOutputType(SlugBlobArrayOutput{})
}
