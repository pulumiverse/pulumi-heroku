// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cert

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

// This resource manages an SSL certificate for a Heroku app.
//
// !> **WARNING:** This resource is deprecated in favor of `ssl.Ssl`.
//
// ## Example Usage
//
// ## Importing
//
// When importing a Heroku cert resource, the ID must be built using the app name colon the unique ID from the Heroku API. For an app named `production-api` with a certificate ID of `b85d9224-310b-409b-891e-c903f5a40568`, you would import it as:
type Cert struct {
	pulumi.CustomResourceState

	// Heroku app ID (do not use app name)
	App pulumi.StringOutput `pulumi:"app"`
	// The certificate chain to add
	CertificateChain pulumi.StringOutput `pulumi:"certificateChain"`
	// The CNAME for the SSL endpoint
	Cname pulumi.StringOutput `pulumi:"cname"`
	// The name of the SSL certificate
	Name pulumi.StringOutput `pulumi:"name"`
	// The private key for a given certificate chain
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
}

// NewCert registers a new resource with the given unique name, arguments, and options.
func NewCert(ctx *pulumi.Context,
	name string, args *CertArgs, opts ...pulumi.ResourceOption) (*Cert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.App == nil {
		return nil, errors.New("invalid value for required argument 'App'")
	}
	if args.CertificateChain == nil {
		return nil, errors.New("invalid value for required argument 'CertificateChain'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cert
	err := ctx.RegisterResource("heroku:cert/cert:Cert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCert gets an existing Cert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertState, opts ...pulumi.ResourceOption) (*Cert, error) {
	var resource Cert
	err := ctx.ReadResource("heroku:cert/cert:Cert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cert resources.
type certState struct {
	// Heroku app ID (do not use app name)
	App *string `pulumi:"app"`
	// The certificate chain to add
	CertificateChain *string `pulumi:"certificateChain"`
	// The CNAME for the SSL endpoint
	Cname *string `pulumi:"cname"`
	// The name of the SSL certificate
	Name *string `pulumi:"name"`
	// The private key for a given certificate chain
	PrivateKey *string `pulumi:"privateKey"`
}

type CertState struct {
	// Heroku app ID (do not use app name)
	App pulumi.StringPtrInput
	// The certificate chain to add
	CertificateChain pulumi.StringPtrInput
	// The CNAME for the SSL endpoint
	Cname pulumi.StringPtrInput
	// The name of the SSL certificate
	Name pulumi.StringPtrInput
	// The private key for a given certificate chain
	PrivateKey pulumi.StringPtrInput
}

func (CertState) ElementType() reflect.Type {
	return reflect.TypeOf((*certState)(nil)).Elem()
}

type certArgs struct {
	// Heroku app ID (do not use app name)
	App string `pulumi:"app"`
	// The certificate chain to add
	CertificateChain string `pulumi:"certificateChain"`
	// The private key for a given certificate chain
	PrivateKey string `pulumi:"privateKey"`
}

// The set of arguments for constructing a Cert resource.
type CertArgs struct {
	// Heroku app ID (do not use app name)
	App pulumi.StringInput
	// The certificate chain to add
	CertificateChain pulumi.StringInput
	// The private key for a given certificate chain
	PrivateKey pulumi.StringInput
}

func (CertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certArgs)(nil)).Elem()
}

type CertInput interface {
	pulumi.Input

	ToCertOutput() CertOutput
	ToCertOutputWithContext(ctx context.Context) CertOutput
}

func (*Cert) ElementType() reflect.Type {
	return reflect.TypeOf((**Cert)(nil)).Elem()
}

func (i *Cert) ToCertOutput() CertOutput {
	return i.ToCertOutputWithContext(context.Background())
}

func (i *Cert) ToCertOutputWithContext(ctx context.Context) CertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertOutput)
}

// CertArrayInput is an input type that accepts CertArray and CertArrayOutput values.
// You can construct a concrete instance of `CertArrayInput` via:
//
//	CertArray{ CertArgs{...} }
type CertArrayInput interface {
	pulumi.Input

	ToCertArrayOutput() CertArrayOutput
	ToCertArrayOutputWithContext(context.Context) CertArrayOutput
}

type CertArray []CertInput

func (CertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cert)(nil)).Elem()
}

func (i CertArray) ToCertArrayOutput() CertArrayOutput {
	return i.ToCertArrayOutputWithContext(context.Background())
}

func (i CertArray) ToCertArrayOutputWithContext(ctx context.Context) CertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertArrayOutput)
}

// CertMapInput is an input type that accepts CertMap and CertMapOutput values.
// You can construct a concrete instance of `CertMapInput` via:
//
//	CertMap{ "key": CertArgs{...} }
type CertMapInput interface {
	pulumi.Input

	ToCertMapOutput() CertMapOutput
	ToCertMapOutputWithContext(context.Context) CertMapOutput
}

type CertMap map[string]CertInput

func (CertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cert)(nil)).Elem()
}

func (i CertMap) ToCertMapOutput() CertMapOutput {
	return i.ToCertMapOutputWithContext(context.Background())
}

func (i CertMap) ToCertMapOutputWithContext(ctx context.Context) CertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertMapOutput)
}

type CertOutput struct{ *pulumi.OutputState }

func (CertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cert)(nil)).Elem()
}

func (o CertOutput) ToCertOutput() CertOutput {
	return o
}

func (o CertOutput) ToCertOutputWithContext(ctx context.Context) CertOutput {
	return o
}

// Heroku app ID (do not use app name)
func (o CertOutput) App() pulumi.StringOutput {
	return o.ApplyT(func(v *Cert) pulumi.StringOutput { return v.App }).(pulumi.StringOutput)
}

// The certificate chain to add
func (o CertOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v *Cert) pulumi.StringOutput { return v.CertificateChain }).(pulumi.StringOutput)
}

// The CNAME for the SSL endpoint
func (o CertOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *Cert) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

// The name of the SSL certificate
func (o CertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The private key for a given certificate chain
func (o CertOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Cert) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

type CertArrayOutput struct{ *pulumi.OutputState }

func (CertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cert)(nil)).Elem()
}

func (o CertArrayOutput) ToCertArrayOutput() CertArrayOutput {
	return o
}

func (o CertArrayOutput) ToCertArrayOutputWithContext(ctx context.Context) CertArrayOutput {
	return o
}

func (o CertArrayOutput) Index(i pulumi.IntInput) CertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cert {
		return vs[0].([]*Cert)[vs[1].(int)]
	}).(CertOutput)
}

type CertMapOutput struct{ *pulumi.OutputState }

func (CertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cert)(nil)).Elem()
}

func (o CertMapOutput) ToCertMapOutput() CertMapOutput {
	return o
}

func (o CertMapOutput) ToCertMapOutputWithContext(ctx context.Context) CertMapOutput {
	return o
}

func (o CertMapOutput) MapIndex(k pulumi.StringInput) CertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cert {
		return vs[0].(map[string]*Cert)[vs[1].(string)]
	}).(CertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertInput)(nil)).Elem(), &Cert{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertArrayInput)(nil)).Elem(), CertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertMapInput)(nil)).Elem(), CertMap{})
	pulumi.RegisterOutputType(CertOutput{})
	pulumi.RegisterOutputType(CertArrayOutput{})
	pulumi.RegisterOutputType(CertMapOutput{})
}
