// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipeline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

// Provides a resource to manage a pipeline's config vars.
//
// The pipeline config var API can only retrieve config vars that can be set at the pipeline level.
// Additionally, these two supported pipeline stages are:
// - [Heroku CI](https://devcenter.heroku.com/articles/heroku-ci#setting-environment-variables-the-env-key) config vars (test stage)
// - [Review Apps](https://devcenter.heroku.com/articles/github-integration-review-apps#configuration) config vars (review stage)
//
// The development, staging & production stages do not have stage-level config vars, only those on the apps within each stage.
//
// ## Example Usage
//
// ## Import
//
// This resource defines two config var attributes with one of them used for masking any sensitive/secret variables
//
// during a `pulumi preview|apply` in a CI build, terminal, etc. This 'sensitive' distinction for config vars is unique to
//
// this provider and not a built-in feature of the Heroku Platform API. Therefore, it will not be possible to import
//
// this resource.
//
// However, it is safe to define the resource in your configuration file and execute a `pulumi up`
//
// as the end result is `noop` when the config vars already exist on the remote resource.
type ConfigVar struct {
	pulumi.CustomResourceState

	// All vars of a pipeline stage. This is marked `sensitive` so that `sensitiveVars` do not leak in the console/logs.
	AllVars pulumi.StringMapOutput `pulumi:"allVars"`
	// The UUID of an existing pipeline.
	PipelineId pulumi.StringOutput `pulumi:"pipelineId"`
	// The pipeline's stage. Supported values are `test` & `review`.
	PipelineStage pulumi.StringOutput    `pulumi:"pipelineStage"`
	SensitiveVars pulumi.StringMapOutput `pulumi:"sensitiveVars"`
	// Map of config vars that can be output in plaintext.
	Vars pulumi.StringMapOutput `pulumi:"vars"`
}

// NewConfigVar registers a new resource with the given unique name, arguments, and options.
func NewConfigVar(ctx *pulumi.Context,
	name string, args *ConfigVarArgs, opts ...pulumi.ResourceOption) (*ConfigVar, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineId == nil {
		return nil, errors.New("invalid value for required argument 'PipelineId'")
	}
	if args.PipelineStage == nil {
		return nil, errors.New("invalid value for required argument 'PipelineStage'")
	}
	if args.SensitiveVars != nil {
		args.SensitiveVars = pulumi.ToSecret(args.SensitiveVars).(pulumi.StringMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"allVars",
		"sensitiveVars",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigVar
	err := ctx.RegisterResource("heroku:pipeline/configVar:ConfigVar", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigVar gets an existing ConfigVar resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigVar(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigVarState, opts ...pulumi.ResourceOption) (*ConfigVar, error) {
	var resource ConfigVar
	err := ctx.ReadResource("heroku:pipeline/configVar:ConfigVar", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigVar resources.
type configVarState struct {
	// All vars of a pipeline stage. This is marked `sensitive` so that `sensitiveVars` do not leak in the console/logs.
	AllVars map[string]string `pulumi:"allVars"`
	// The UUID of an existing pipeline.
	PipelineId *string `pulumi:"pipelineId"`
	// The pipeline's stage. Supported values are `test` & `review`.
	PipelineStage *string           `pulumi:"pipelineStage"`
	SensitiveVars map[string]string `pulumi:"sensitiveVars"`
	// Map of config vars that can be output in plaintext.
	Vars map[string]string `pulumi:"vars"`
}

type ConfigVarState struct {
	// All vars of a pipeline stage. This is marked `sensitive` so that `sensitiveVars` do not leak in the console/logs.
	AllVars pulumi.StringMapInput
	// The UUID of an existing pipeline.
	PipelineId pulumi.StringPtrInput
	// The pipeline's stage. Supported values are `test` & `review`.
	PipelineStage pulumi.StringPtrInput
	SensitiveVars pulumi.StringMapInput
	// Map of config vars that can be output in plaintext.
	Vars pulumi.StringMapInput
}

func (ConfigVarState) ElementType() reflect.Type {
	return reflect.TypeOf((*configVarState)(nil)).Elem()
}

type configVarArgs struct {
	// The UUID of an existing pipeline.
	PipelineId string `pulumi:"pipelineId"`
	// The pipeline's stage. Supported values are `test` & `review`.
	PipelineStage string            `pulumi:"pipelineStage"`
	SensitiveVars map[string]string `pulumi:"sensitiveVars"`
	// Map of config vars that can be output in plaintext.
	Vars map[string]string `pulumi:"vars"`
}

// The set of arguments for constructing a ConfigVar resource.
type ConfigVarArgs struct {
	// The UUID of an existing pipeline.
	PipelineId pulumi.StringInput
	// The pipeline's stage. Supported values are `test` & `review`.
	PipelineStage pulumi.StringInput
	SensitiveVars pulumi.StringMapInput
	// Map of config vars that can be output in plaintext.
	Vars pulumi.StringMapInput
}

func (ConfigVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configVarArgs)(nil)).Elem()
}

type ConfigVarInput interface {
	pulumi.Input

	ToConfigVarOutput() ConfigVarOutput
	ToConfigVarOutputWithContext(ctx context.Context) ConfigVarOutput
}

func (*ConfigVar) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigVar)(nil)).Elem()
}

func (i *ConfigVar) ToConfigVarOutput() ConfigVarOutput {
	return i.ToConfigVarOutputWithContext(context.Background())
}

func (i *ConfigVar) ToConfigVarOutputWithContext(ctx context.Context) ConfigVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVarOutput)
}

// ConfigVarArrayInput is an input type that accepts ConfigVarArray and ConfigVarArrayOutput values.
// You can construct a concrete instance of `ConfigVarArrayInput` via:
//
//	ConfigVarArray{ ConfigVarArgs{...} }
type ConfigVarArrayInput interface {
	pulumi.Input

	ToConfigVarArrayOutput() ConfigVarArrayOutput
	ToConfigVarArrayOutputWithContext(context.Context) ConfigVarArrayOutput
}

type ConfigVarArray []ConfigVarInput

func (ConfigVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigVar)(nil)).Elem()
}

func (i ConfigVarArray) ToConfigVarArrayOutput() ConfigVarArrayOutput {
	return i.ToConfigVarArrayOutputWithContext(context.Background())
}

func (i ConfigVarArray) ToConfigVarArrayOutputWithContext(ctx context.Context) ConfigVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVarArrayOutput)
}

// ConfigVarMapInput is an input type that accepts ConfigVarMap and ConfigVarMapOutput values.
// You can construct a concrete instance of `ConfigVarMapInput` via:
//
//	ConfigVarMap{ "key": ConfigVarArgs{...} }
type ConfigVarMapInput interface {
	pulumi.Input

	ToConfigVarMapOutput() ConfigVarMapOutput
	ToConfigVarMapOutputWithContext(context.Context) ConfigVarMapOutput
}

type ConfigVarMap map[string]ConfigVarInput

func (ConfigVarMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigVar)(nil)).Elem()
}

func (i ConfigVarMap) ToConfigVarMapOutput() ConfigVarMapOutput {
	return i.ToConfigVarMapOutputWithContext(context.Background())
}

func (i ConfigVarMap) ToConfigVarMapOutputWithContext(ctx context.Context) ConfigVarMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVarMapOutput)
}

type ConfigVarOutput struct{ *pulumi.OutputState }

func (ConfigVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigVar)(nil)).Elem()
}

func (o ConfigVarOutput) ToConfigVarOutput() ConfigVarOutput {
	return o
}

func (o ConfigVarOutput) ToConfigVarOutputWithContext(ctx context.Context) ConfigVarOutput {
	return o
}

// All vars of a pipeline stage. This is marked `sensitive` so that `sensitiveVars` do not leak in the console/logs.
func (o ConfigVarOutput) AllVars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigVar) pulumi.StringMapOutput { return v.AllVars }).(pulumi.StringMapOutput)
}

// The UUID of an existing pipeline.
func (o ConfigVarOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigVar) pulumi.StringOutput { return v.PipelineId }).(pulumi.StringOutput)
}

// The pipeline's stage. Supported values are `test` & `review`.
func (o ConfigVarOutput) PipelineStage() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigVar) pulumi.StringOutput { return v.PipelineStage }).(pulumi.StringOutput)
}

func (o ConfigVarOutput) SensitiveVars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigVar) pulumi.StringMapOutput { return v.SensitiveVars }).(pulumi.StringMapOutput)
}

// Map of config vars that can be output in plaintext.
func (o ConfigVarOutput) Vars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigVar) pulumi.StringMapOutput { return v.Vars }).(pulumi.StringMapOutput)
}

type ConfigVarArrayOutput struct{ *pulumi.OutputState }

func (ConfigVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigVar)(nil)).Elem()
}

func (o ConfigVarArrayOutput) ToConfigVarArrayOutput() ConfigVarArrayOutput {
	return o
}

func (o ConfigVarArrayOutput) ToConfigVarArrayOutputWithContext(ctx context.Context) ConfigVarArrayOutput {
	return o
}

func (o ConfigVarArrayOutput) Index(i pulumi.IntInput) ConfigVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigVar {
		return vs[0].([]*ConfigVar)[vs[1].(int)]
	}).(ConfigVarOutput)
}

type ConfigVarMapOutput struct{ *pulumi.OutputState }

func (ConfigVarMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigVar)(nil)).Elem()
}

func (o ConfigVarMapOutput) ToConfigVarMapOutput() ConfigVarMapOutput {
	return o
}

func (o ConfigVarMapOutput) ToConfigVarMapOutputWithContext(ctx context.Context) ConfigVarMapOutput {
	return o
}

func (o ConfigVarMapOutput) MapIndex(k pulumi.StringInput) ConfigVarOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigVar {
		return vs[0].(map[string]*ConfigVar)[vs[1].(string)]
	}).(ConfigVarOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigVarInput)(nil)).Elem(), &ConfigVar{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigVarArrayInput)(nil)).Elem(), ConfigVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigVarMapInput)(nil)).Elem(), ConfigVarMap{})
	pulumi.RegisterOutputType(ConfigVarOutput{})
	pulumi.RegisterOutputType(ConfigVarArrayOutput{})
	pulumi.RegisterOutputType(ConfigVarMapOutput{})
}
