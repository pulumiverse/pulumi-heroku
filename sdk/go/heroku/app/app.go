// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-heroku/sdk/go/heroku/internal"
)

// ## Example Usage
//
// ### A Team
//
// A Heroku "team" was originally called an "organization", and that is still the identifier used in this resource.
//
// ## Import
//
// Apps can be imported using an existing app's `UUID` or name.
//
// For example:
//
// ```sh
// $ pulumi import heroku:app/app:App foobar MyApp
// ```
//
// ```sh
// $ pulumi import heroku:app/app:App foobar e74ac056-7d00-4a7e-aa80-df4bc413a825
// ```
//
// Please note: `config_vars` & `sensitive_config_vars` will not be imported due to limitations of Terraform's import process (see issue). All vars will appear to be added on the next plan/apply. The diff may be manually reconciled using the outputs of `heroku config` & `pulumi preview`.
type App struct {
	pulumi.CustomResourceState

	// The flag representing Automated Certificate Management for the app.
	Acm           pulumi.BoolOutput      `pulumi:"acm"`
	AllConfigVars pulumi.StringMapOutput `pulumi:"allConfigVars"`
	// Buildpack names or URLs for the application.
	// Buildpacks configured externally won't be altered if this is not present.
	Buildpacks pulumi.StringArrayOutput `pulumi:"buildpacks"`
	ConfigVars pulumi.StringMapOutput   `pulumi:"configVars"`
	// The Git URL for the application. This is used for
	// deploying new versions of the app.
	GitUrl pulumi.StringOutput `pulumi:"gitUrl"`
	// A hostname for the Heroku application, suitable
	// for pointing DNS records.
	HerokuHostname pulumi.StringOutput `pulumi:"herokuHostname"`
	// If true, the application will be routable
	// only internally in a private space. This option is only available for apps
	// that also specify `space`.
	InternalRouting pulumi.BoolOutput `pulumi:"internalRouting"`
	// The name of the application. In Heroku, this is also the
	// unique ID, so it must be unique and have a minimum of 3 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// A block that can be specified once to define
	// Heroku Team settings for this app. The fields for this block are
	// documented below.
	Organization AppOrganizationPtrOutput `pulumi:"organization"`
	// The region that the app should be deployed in.
	Region              pulumi.StringOutput    `pulumi:"region"`
	SensitiveConfigVars pulumi.StringMapOutput `pulumi:"sensitiveConfigVars"`
	// The name of a private space to create the app in.
	Space pulumi.StringPtrOutput `pulumi:"space"`
	// The application stack is what platform to run the application in.
	Stack pulumi.StringOutput `pulumi:"stack"`
	// The unique UUID of the Heroku app. **NOTE:** Use this for `nullResource` triggers.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The web (HTTP) URL that the application can be accessed
	// at by default.
	WebUrl pulumi.StringOutput `pulumi:"webUrl"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.SensitiveConfigVars != nil {
		args.SensitiveConfigVars = pulumi.ToSecret(args.SensitiveConfigVars).(pulumi.StringMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"allConfigVars",
		"sensitiveConfigVars",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource App
	err := ctx.RegisterResource("heroku:app/app:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("heroku:app/app:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
	// The flag representing Automated Certificate Management for the app.
	Acm           *bool             `pulumi:"acm"`
	AllConfigVars map[string]string `pulumi:"allConfigVars"`
	// Buildpack names or URLs for the application.
	// Buildpacks configured externally won't be altered if this is not present.
	Buildpacks []string          `pulumi:"buildpacks"`
	ConfigVars map[string]string `pulumi:"configVars"`
	// The Git URL for the application. This is used for
	// deploying new versions of the app.
	GitUrl *string `pulumi:"gitUrl"`
	// A hostname for the Heroku application, suitable
	// for pointing DNS records.
	HerokuHostname *string `pulumi:"herokuHostname"`
	// If true, the application will be routable
	// only internally in a private space. This option is only available for apps
	// that also specify `space`.
	InternalRouting *bool `pulumi:"internalRouting"`
	// The name of the application. In Heroku, this is also the
	// unique ID, so it must be unique and have a minimum of 3 characters.
	Name *string `pulumi:"name"`
	// A block that can be specified once to define
	// Heroku Team settings for this app. The fields for this block are
	// documented below.
	Organization *AppOrganization `pulumi:"organization"`
	// The region that the app should be deployed in.
	Region              *string           `pulumi:"region"`
	SensitiveConfigVars map[string]string `pulumi:"sensitiveConfigVars"`
	// The name of a private space to create the app in.
	Space *string `pulumi:"space"`
	// The application stack is what platform to run the application in.
	Stack *string `pulumi:"stack"`
	// The unique UUID of the Heroku app. **NOTE:** Use this for `nullResource` triggers.
	Uuid *string `pulumi:"uuid"`
	// The web (HTTP) URL that the application can be accessed
	// at by default.
	WebUrl *string `pulumi:"webUrl"`
}

type AppState struct {
	// The flag representing Automated Certificate Management for the app.
	Acm           pulumi.BoolPtrInput
	AllConfigVars pulumi.StringMapInput
	// Buildpack names or URLs for the application.
	// Buildpacks configured externally won't be altered if this is not present.
	Buildpacks pulumi.StringArrayInput
	ConfigVars pulumi.StringMapInput
	// The Git URL for the application. This is used for
	// deploying new versions of the app.
	GitUrl pulumi.StringPtrInput
	// A hostname for the Heroku application, suitable
	// for pointing DNS records.
	HerokuHostname pulumi.StringPtrInput
	// If true, the application will be routable
	// only internally in a private space. This option is only available for apps
	// that also specify `space`.
	InternalRouting pulumi.BoolPtrInput
	// The name of the application. In Heroku, this is also the
	// unique ID, so it must be unique and have a minimum of 3 characters.
	Name pulumi.StringPtrInput
	// A block that can be specified once to define
	// Heroku Team settings for this app. The fields for this block are
	// documented below.
	Organization AppOrganizationPtrInput
	// The region that the app should be deployed in.
	Region              pulumi.StringPtrInput
	SensitiveConfigVars pulumi.StringMapInput
	// The name of a private space to create the app in.
	Space pulumi.StringPtrInput
	// The application stack is what platform to run the application in.
	Stack pulumi.StringPtrInput
	// The unique UUID of the Heroku app. **NOTE:** Use this for `nullResource` triggers.
	Uuid pulumi.StringPtrInput
	// The web (HTTP) URL that the application can be accessed
	// at by default.
	WebUrl pulumi.StringPtrInput
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	// The flag representing Automated Certificate Management for the app.
	Acm *bool `pulumi:"acm"`
	// Buildpack names or URLs for the application.
	// Buildpacks configured externally won't be altered if this is not present.
	Buildpacks []string          `pulumi:"buildpacks"`
	ConfigVars map[string]string `pulumi:"configVars"`
	// If true, the application will be routable
	// only internally in a private space. This option is only available for apps
	// that also specify `space`.
	InternalRouting *bool `pulumi:"internalRouting"`
	// The name of the application. In Heroku, this is also the
	// unique ID, so it must be unique and have a minimum of 3 characters.
	Name *string `pulumi:"name"`
	// A block that can be specified once to define
	// Heroku Team settings for this app. The fields for this block are
	// documented below.
	Organization *AppOrganization `pulumi:"organization"`
	// The region that the app should be deployed in.
	Region              string            `pulumi:"region"`
	SensitiveConfigVars map[string]string `pulumi:"sensitiveConfigVars"`
	// The name of a private space to create the app in.
	Space *string `pulumi:"space"`
	// The application stack is what platform to run the application in.
	Stack *string `pulumi:"stack"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// The flag representing Automated Certificate Management for the app.
	Acm pulumi.BoolPtrInput
	// Buildpack names or URLs for the application.
	// Buildpacks configured externally won't be altered if this is not present.
	Buildpacks pulumi.StringArrayInput
	ConfigVars pulumi.StringMapInput
	// If true, the application will be routable
	// only internally in a private space. This option is only available for apps
	// that also specify `space`.
	InternalRouting pulumi.BoolPtrInput
	// The name of the application. In Heroku, this is also the
	// unique ID, so it must be unique and have a minimum of 3 characters.
	Name pulumi.StringPtrInput
	// A block that can be specified once to define
	// Heroku Team settings for this app. The fields for this block are
	// documented below.
	Organization AppOrganizationPtrInput
	// The region that the app should be deployed in.
	Region              pulumi.StringInput
	SensitiveConfigVars pulumi.StringMapInput
	// The name of a private space to create the app in.
	Space pulumi.StringPtrInput
	// The application stack is what platform to run the application in.
	Stack pulumi.StringPtrInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

// AppArrayInput is an input type that accepts AppArray and AppArrayOutput values.
// You can construct a concrete instance of `AppArrayInput` via:
//
//	AppArray{ AppArgs{...} }
type AppArrayInput interface {
	pulumi.Input

	ToAppArrayOutput() AppArrayOutput
	ToAppArrayOutputWithContext(context.Context) AppArrayOutput
}

type AppArray []AppInput

func (AppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (i AppArray) ToAppArrayOutput() AppArrayOutput {
	return i.ToAppArrayOutputWithContext(context.Background())
}

func (i AppArray) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppArrayOutput)
}

// AppMapInput is an input type that accepts AppMap and AppMapOutput values.
// You can construct a concrete instance of `AppMapInput` via:
//
//	AppMap{ "key": AppArgs{...} }
type AppMapInput interface {
	pulumi.Input

	ToAppMapOutput() AppMapOutput
	ToAppMapOutputWithContext(context.Context) AppMapOutput
}

type AppMap map[string]AppInput

func (AppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (i AppMap) ToAppMapOutput() AppMapOutput {
	return i.ToAppMapOutputWithContext(context.Background())
}

func (i AppMap) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMapOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

// The flag representing Automated Certificate Management for the app.
func (o AppOutput) Acm() pulumi.BoolOutput {
	return o.ApplyT(func(v *App) pulumi.BoolOutput { return v.Acm }).(pulumi.BoolOutput)
}

func (o AppOutput) AllConfigVars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *App) pulumi.StringMapOutput { return v.AllConfigVars }).(pulumi.StringMapOutput)
}

// Buildpack names or URLs for the application.
// Buildpacks configured externally won't be altered if this is not present.
func (o AppOutput) Buildpacks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *App) pulumi.StringArrayOutput { return v.Buildpacks }).(pulumi.StringArrayOutput)
}

func (o AppOutput) ConfigVars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *App) pulumi.StringMapOutput { return v.ConfigVars }).(pulumi.StringMapOutput)
}

// The Git URL for the application. This is used for
// deploying new versions of the app.
func (o AppOutput) GitUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.GitUrl }).(pulumi.StringOutput)
}

// A hostname for the Heroku application, suitable
// for pointing DNS records.
func (o AppOutput) HerokuHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.HerokuHostname }).(pulumi.StringOutput)
}

// If true, the application will be routable
// only internally in a private space. This option is only available for apps
// that also specify `space`.
func (o AppOutput) InternalRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v *App) pulumi.BoolOutput { return v.InternalRouting }).(pulumi.BoolOutput)
}

// The name of the application. In Heroku, this is also the
// unique ID, so it must be unique and have a minimum of 3 characters.
func (o AppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A block that can be specified once to define
// Heroku Team settings for this app. The fields for this block are
// documented below.
func (o AppOutput) Organization() AppOrganizationPtrOutput {
	return o.ApplyT(func(v *App) AppOrganizationPtrOutput { return v.Organization }).(AppOrganizationPtrOutput)
}

// The region that the app should be deployed in.
func (o AppOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AppOutput) SensitiveConfigVars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *App) pulumi.StringMapOutput { return v.SensitiveConfigVars }).(pulumi.StringMapOutput)
}

// The name of a private space to create the app in.
func (o AppOutput) Space() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.Space }).(pulumi.StringPtrOutput)
}

// The application stack is what platform to run the application in.
func (o AppOutput) Stack() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Stack }).(pulumi.StringOutput)
}

// The unique UUID of the Heroku app. **NOTE:** Use this for `nullResource` triggers.
func (o AppOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// The web (HTTP) URL that the application can be accessed
// at by default.
func (o AppOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.WebUrl }).(pulumi.StringOutput)
}

type AppArrayOutput struct{ *pulumi.OutputState }

func (AppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (o AppArrayOutput) ToAppArrayOutput() AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return o
}

func (o AppArrayOutput) Index(i pulumi.IntInput) AppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *App {
		return vs[0].([]*App)[vs[1].(int)]
	}).(AppOutput)
}

type AppMapOutput struct{ *pulumi.OutputState }

func (AppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (o AppMapOutput) ToAppMapOutput() AppMapOutput {
	return o
}

func (o AppMapOutput) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return o
}

func (o AppMapOutput) MapIndex(k pulumi.StringInput) AppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *App {
		return vs[0].(map[string]*App)[vs[1].(string)]
	}).(AppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppArrayInput)(nil)).Elem(), AppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMapInput)(nil)).Elem(), AppMap{})
	pulumi.RegisterOutputType(AppOutput{})
	pulumi.RegisterOutputType(AppArrayOutput{})
	pulumi.RegisterOutputType(AppMapOutput{})
}
