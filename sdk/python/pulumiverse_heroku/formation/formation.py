# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['FormationArgs', 'Formation']

@pulumi.input_type
class FormationArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 quantity: pulumi.Input[int],
                 size: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        The set of arguments for constructing a Formation resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[int] quantity: number of processes to maintain
        :param pulumi.Input[str] size: dyno size (Example: “standard-1X”). Capitalization does not matter.
        :param pulumi.Input[str] type: type of process such as "web"
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def quantity(self) -> pulumi.Input[int]:
        """
        number of processes to maintain
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: pulumi.Input[int]):
        pulumi.set(self, "quantity", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[str]:
        """
        dyno size (Example: “standard-1X”). Capitalization does not matter.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type of process such as "web"
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _FormationState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 quantity: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Formation resources.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[int] quantity: number of processes to maintain
        :param pulumi.Input[str] size: dyno size (Example: “standard-1X”). Capitalization does not matter.
        :param pulumi.Input[str] type: type of process such as "web"
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[pulumi.Input[int]]:
        """
        number of processes to maintain
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        dyno size (Example: “standard-1X”). Capitalization does not matter.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of process such as "web"
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Formation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 quantity: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a [Heroku Formation](https://devcenter.heroku.com/articles/platform-api-reference#formation)
        resource.

        A formation represents the formation of processes that should be set for an application.

        Please note the following:
        * The application must have a dyno in order to update its formation.
        * If the heroku formation resource is removed and deleted, this will be a no-op action in Heroku.
          The Heroku Platform does not have a `DELETE` endpoint for `formation`.
        * This resource works well with the `app.Release` resource, which allows you to deploy a slug/release to an application
          before the formation can be updated.

        ## Example Usage

        ## Import

        Existing formations can be imported using the combination of the application name, a colon, and the formation's type.

        For example:

        ```sh
        $ pulumi import heroku:formation/formation:Formation foobar-web foobar:web
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[int] quantity: number of processes to maintain
        :param pulumi.Input[str] size: dyno size (Example: “standard-1X”). Capitalization does not matter.
        :param pulumi.Input[str] type: type of process such as "web"
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FormationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a [Heroku Formation](https://devcenter.heroku.com/articles/platform-api-reference#formation)
        resource.

        A formation represents the formation of processes that should be set for an application.

        Please note the following:
        * The application must have a dyno in order to update its formation.
        * If the heroku formation resource is removed and deleted, this will be a no-op action in Heroku.
          The Heroku Platform does not have a `DELETE` endpoint for `formation`.
        * This resource works well with the `app.Release` resource, which allows you to deploy a slug/release to an application
          before the formation can be updated.

        ## Example Usage

        ## Import

        Existing formations can be imported using the combination of the application name, a colon, and the formation's type.

        For example:

        ```sh
        $ pulumi import heroku:formation/formation:Formation foobar-web foobar:web
        ```

        :param str resource_name: The name of the resource.
        :param FormationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FormationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 quantity: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FormationArgs.__new__(FormationArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            if quantity is None and not opts.urn:
                raise TypeError("Missing required property 'quantity'")
            __props__.__dict__["quantity"] = quantity
            if size is None and not opts.urn:
                raise TypeError("Missing required property 'size'")
            __props__.__dict__["size"] = size
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(Formation, __self__).__init__(
            'heroku:formation/formation:Formation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            quantity: Optional[pulumi.Input[int]] = None,
            size: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Formation':
        """
        Get an existing Formation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[int] quantity: number of processes to maintain
        :param pulumi.Input[str] size: dyno size (Example: “standard-1X”). Capitalization does not matter.
        :param pulumi.Input[str] type: type of process such as "web"
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FormationState.__new__(_FormationState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["quantity"] = quantity
        __props__.__dict__["size"] = size
        __props__.__dict__["type"] = type
        return Formation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def quantity(self) -> pulumi.Output[int]:
        """
        number of processes to maintain
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[str]:
        """
        dyno size (Example: “standard-1X”). Capitalization does not matter.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        type of process such as "web"
        """
        return pulumi.get(self, "type")

