# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppArgs', 'App']

@pulumi.input_type
class AppArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 acm: Optional[pulumi.Input[bool]] = None,
                 buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 internal_routing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input['AppOrganizationArgs']] = None,
                 sensitive_config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 stack: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a App resource.
        :param pulumi.Input[str] region: The region that the app should be deployed in.
        :param pulumi.Input[bool] acm: The flag representing Automated Certificate Management for the app.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buildpacks: Buildpack names or URLs for the application.
               Buildpacks configured externally won't be altered if this is not present.
        :param pulumi.Input[bool] internal_routing: If true, the application will be routable
               only internally in a private space. This option is only available for apps
               that also specify `space`.
        :param pulumi.Input[str] name: The name of the application. In Heroku, this is also the
               unique ID, so it must be unique and have a minimum of 3 characters.
        :param pulumi.Input['AppOrganizationArgs'] organization: A block that can be specified once to define
               Heroku Team settings for this app. The fields for this block are
               documented below.
        :param pulumi.Input[str] space: The name of a private space to create the app in.
        :param pulumi.Input[str] stack: The application stack is what platform to run the application in.
        """
        pulumi.set(__self__, "region", region)
        if acm is not None:
            pulumi.set(__self__, "acm", acm)
        if buildpacks is not None:
            pulumi.set(__self__, "buildpacks", buildpacks)
        if config_vars is not None:
            pulumi.set(__self__, "config_vars", config_vars)
        if internal_routing is not None:
            pulumi.set(__self__, "internal_routing", internal_routing)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if sensitive_config_vars is not None:
            pulumi.set(__self__, "sensitive_config_vars", sensitive_config_vars)
        if space is not None:
            pulumi.set(__self__, "space", space)
        if stack is not None:
            pulumi.set(__self__, "stack", stack)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The region that the app should be deployed in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def acm(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag representing Automated Certificate Management for the app.
        """
        return pulumi.get(self, "acm")

    @acm.setter
    def acm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acm", value)

    @property
    @pulumi.getter
    def buildpacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Buildpack names or URLs for the application.
        Buildpacks configured externally won't be altered if this is not present.
        """
        return pulumi.get(self, "buildpacks")

    @buildpacks.setter
    def buildpacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "buildpacks", value)

    @property
    @pulumi.getter(name="configVars")
    def config_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "config_vars")

    @config_vars.setter
    def config_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config_vars", value)

    @property
    @pulumi.getter(name="internalRouting")
    def internal_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the application will be routable
        only internally in a private space. This option is only available for apps
        that also specify `space`.
        """
        return pulumi.get(self, "internal_routing")

    @internal_routing.setter
    def internal_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "internal_routing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the application. In Heroku, this is also the
        unique ID, so it must be unique and have a minimum of 3 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input['AppOrganizationArgs']]:
        """
        A block that can be specified once to define
        Heroku Team settings for this app. The fields for this block are
        documented below.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input['AppOrganizationArgs']]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="sensitiveConfigVars")
    def sensitive_config_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sensitive_config_vars")

    @sensitive_config_vars.setter
    def sensitive_config_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sensitive_config_vars", value)

    @property
    @pulumi.getter
    def space(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a private space to create the app in.
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space", value)

    @property
    @pulumi.getter
    def stack(self) -> Optional[pulumi.Input[str]]:
        """
        The application stack is what platform to run the application in.
        """
        return pulumi.get(self, "stack")

    @stack.setter
    def stack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack", value)


@pulumi.input_type
class _AppState:
    def __init__(__self__, *,
                 acm: Optional[pulumi.Input[bool]] = None,
                 all_config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 git_url: Optional[pulumi.Input[str]] = None,
                 heroku_hostname: Optional[pulumi.Input[str]] = None,
                 internal_routing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input['AppOrganizationArgs']] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 sensitive_config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 stack: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 web_url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering App resources.
        :param pulumi.Input[bool] acm: The flag representing Automated Certificate Management for the app.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buildpacks: Buildpack names or URLs for the application.
               Buildpacks configured externally won't be altered if this is not present.
        :param pulumi.Input[str] git_url: The Git URL for the application. This is used for
               deploying new versions of the app.
        :param pulumi.Input[str] heroku_hostname: A hostname for the Heroku application, suitable
               for pointing DNS records.
        :param pulumi.Input[bool] internal_routing: If true, the application will be routable
               only internally in a private space. This option is only available for apps
               that also specify `space`.
        :param pulumi.Input[str] name: The name of the application. In Heroku, this is also the
               unique ID, so it must be unique and have a minimum of 3 characters.
        :param pulumi.Input['AppOrganizationArgs'] organization: A block that can be specified once to define
               Heroku Team settings for this app. The fields for this block are
               documented below.
        :param pulumi.Input[str] region: The region that the app should be deployed in.
        :param pulumi.Input[str] space: The name of a private space to create the app in.
        :param pulumi.Input[str] stack: The application stack is what platform to run the application in.
        :param pulumi.Input[str] uuid: The unique UUID of the Heroku app. **NOTE:** Use this for `null_resource` triggers.
        :param pulumi.Input[str] web_url: The web (HTTP) URL that the application can be accessed
               at by default.
        """
        if acm is not None:
            pulumi.set(__self__, "acm", acm)
        if all_config_vars is not None:
            pulumi.set(__self__, "all_config_vars", all_config_vars)
        if buildpacks is not None:
            pulumi.set(__self__, "buildpacks", buildpacks)
        if config_vars is not None:
            pulumi.set(__self__, "config_vars", config_vars)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if heroku_hostname is not None:
            pulumi.set(__self__, "heroku_hostname", heroku_hostname)
        if internal_routing is not None:
            pulumi.set(__self__, "internal_routing", internal_routing)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sensitive_config_vars is not None:
            pulumi.set(__self__, "sensitive_config_vars", sensitive_config_vars)
        if space is not None:
            pulumi.set(__self__, "space", space)
        if stack is not None:
            pulumi.set(__self__, "stack", stack)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if web_url is not None:
            pulumi.set(__self__, "web_url", web_url)

    @property
    @pulumi.getter
    def acm(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag representing Automated Certificate Management for the app.
        """
        return pulumi.get(self, "acm")

    @acm.setter
    def acm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acm", value)

    @property
    @pulumi.getter(name="allConfigVars")
    def all_config_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "all_config_vars")

    @all_config_vars.setter
    def all_config_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "all_config_vars", value)

    @property
    @pulumi.getter
    def buildpacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Buildpack names or URLs for the application.
        Buildpacks configured externally won't be altered if this is not present.
        """
        return pulumi.get(self, "buildpacks")

    @buildpacks.setter
    def buildpacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "buildpacks", value)

    @property
    @pulumi.getter(name="configVars")
    def config_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "config_vars")

    @config_vars.setter
    def config_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config_vars", value)

    @property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[pulumi.Input[str]]:
        """
        The Git URL for the application. This is used for
        deploying new versions of the app.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_url", value)

    @property
    @pulumi.getter(name="herokuHostname")
    def heroku_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        A hostname for the Heroku application, suitable
        for pointing DNS records.
        """
        return pulumi.get(self, "heroku_hostname")

    @heroku_hostname.setter
    def heroku_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "heroku_hostname", value)

    @property
    @pulumi.getter(name="internalRouting")
    def internal_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the application will be routable
        only internally in a private space. This option is only available for apps
        that also specify `space`.
        """
        return pulumi.get(self, "internal_routing")

    @internal_routing.setter
    def internal_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "internal_routing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the application. In Heroku, this is also the
        unique ID, so it must be unique and have a minimum of 3 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input['AppOrganizationArgs']]:
        """
        A block that can be specified once to define
        Heroku Team settings for this app. The fields for this block are
        documented below.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input['AppOrganizationArgs']]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region that the app should be deployed in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sensitiveConfigVars")
    def sensitive_config_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sensitive_config_vars")

    @sensitive_config_vars.setter
    def sensitive_config_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sensitive_config_vars", value)

    @property
    @pulumi.getter
    def space(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a private space to create the app in.
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space", value)

    @property
    @pulumi.getter
    def stack(self) -> Optional[pulumi.Input[str]]:
        """
        The application stack is what platform to run the application in.
        """
        return pulumi.get(self, "stack")

    @stack.setter
    def stack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique UUID of the Heroku app. **NOTE:** Use this for `null_resource` triggers.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[pulumi.Input[str]]:
        """
        The web (HTTP) URL that the application can be accessed
        at by default.
        """
        return pulumi.get(self, "web_url")

    @web_url.setter
    def web_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_url", value)


class App(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acm: Optional[pulumi.Input[bool]] = None,
                 buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 internal_routing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[Union['AppOrganizationArgs', 'AppOrganizationArgsDict']]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 sensitive_config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 stack: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ### A Team

        A Heroku "team" was originally called an "organization", and that is still the identifier used in this resource.

        ## Import

        Apps can be imported using an existing app's `UUID` or name.

        For example:

        ```sh
        $ pulumi import heroku:app/app:App foobar MyApp
        ```

        ```sh
        $ pulumi import heroku:app/app:App foobar e74ac056-7d00-4a7e-aa80-df4bc413a825
        ```

        Please note: `config_vars` & `sensitive_config_vars` will not be imported due to limitations of Terraform's import process (see issue). All vars will appear to be added on the next plan/apply. The diff may be manually reconciled using the outputs of `heroku config` & `pulumi preview`.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acm: The flag representing Automated Certificate Management for the app.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buildpacks: Buildpack names or URLs for the application.
               Buildpacks configured externally won't be altered if this is not present.
        :param pulumi.Input[bool] internal_routing: If true, the application will be routable
               only internally in a private space. This option is only available for apps
               that also specify `space`.
        :param pulumi.Input[str] name: The name of the application. In Heroku, this is also the
               unique ID, so it must be unique and have a minimum of 3 characters.
        :param pulumi.Input[Union['AppOrganizationArgs', 'AppOrganizationArgsDict']] organization: A block that can be specified once to define
               Heroku Team settings for this app. The fields for this block are
               documented below.
        :param pulumi.Input[str] region: The region that the app should be deployed in.
        :param pulumi.Input[str] space: The name of a private space to create the app in.
        :param pulumi.Input[str] stack: The application stack is what platform to run the application in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ### A Team

        A Heroku "team" was originally called an "organization", and that is still the identifier used in this resource.

        ## Import

        Apps can be imported using an existing app's `UUID` or name.

        For example:

        ```sh
        $ pulumi import heroku:app/app:App foobar MyApp
        ```

        ```sh
        $ pulumi import heroku:app/app:App foobar e74ac056-7d00-4a7e-aa80-df4bc413a825
        ```

        Please note: `config_vars` & `sensitive_config_vars` will not be imported due to limitations of Terraform's import process (see issue). All vars will appear to be added on the next plan/apply. The diff may be manually reconciled using the outputs of `heroku config` & `pulumi preview`.

        :param str resource_name: The name of the resource.
        :param AppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acm: Optional[pulumi.Input[bool]] = None,
                 buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 internal_routing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[Union['AppOrganizationArgs', 'AppOrganizationArgsDict']]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 sensitive_config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 stack: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppArgs.__new__(AppArgs)

            __props__.__dict__["acm"] = acm
            __props__.__dict__["buildpacks"] = buildpacks
            __props__.__dict__["config_vars"] = config_vars
            __props__.__dict__["internal_routing"] = internal_routing
            __props__.__dict__["name"] = name
            __props__.__dict__["organization"] = organization
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["sensitive_config_vars"] = None if sensitive_config_vars is None else pulumi.Output.secret(sensitive_config_vars)
            __props__.__dict__["space"] = space
            __props__.__dict__["stack"] = stack
            __props__.__dict__["all_config_vars"] = None
            __props__.__dict__["git_url"] = None
            __props__.__dict__["heroku_hostname"] = None
            __props__.__dict__["uuid"] = None
            __props__.__dict__["web_url"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["allConfigVars", "sensitiveConfigVars"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(App, __self__).__init__(
            'heroku:app/app:App',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acm: Optional[pulumi.Input[bool]] = None,
            all_config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            git_url: Optional[pulumi.Input[str]] = None,
            heroku_hostname: Optional[pulumi.Input[str]] = None,
            internal_routing: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[Union['AppOrganizationArgs', 'AppOrganizationArgsDict']]] = None,
            region: Optional[pulumi.Input[str]] = None,
            sensitive_config_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            space: Optional[pulumi.Input[str]] = None,
            stack: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            web_url: Optional[pulumi.Input[str]] = None) -> 'App':
        """
        Get an existing App resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acm: The flag representing Automated Certificate Management for the app.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buildpacks: Buildpack names or URLs for the application.
               Buildpacks configured externally won't be altered if this is not present.
        :param pulumi.Input[str] git_url: The Git URL for the application. This is used for
               deploying new versions of the app.
        :param pulumi.Input[str] heroku_hostname: A hostname for the Heroku application, suitable
               for pointing DNS records.
        :param pulumi.Input[bool] internal_routing: If true, the application will be routable
               only internally in a private space. This option is only available for apps
               that also specify `space`.
        :param pulumi.Input[str] name: The name of the application. In Heroku, this is also the
               unique ID, so it must be unique and have a minimum of 3 characters.
        :param pulumi.Input[Union['AppOrganizationArgs', 'AppOrganizationArgsDict']] organization: A block that can be specified once to define
               Heroku Team settings for this app. The fields for this block are
               documented below.
        :param pulumi.Input[str] region: The region that the app should be deployed in.
        :param pulumi.Input[str] space: The name of a private space to create the app in.
        :param pulumi.Input[str] stack: The application stack is what platform to run the application in.
        :param pulumi.Input[str] uuid: The unique UUID of the Heroku app. **NOTE:** Use this for `null_resource` triggers.
        :param pulumi.Input[str] web_url: The web (HTTP) URL that the application can be accessed
               at by default.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppState.__new__(_AppState)

        __props__.__dict__["acm"] = acm
        __props__.__dict__["all_config_vars"] = all_config_vars
        __props__.__dict__["buildpacks"] = buildpacks
        __props__.__dict__["config_vars"] = config_vars
        __props__.__dict__["git_url"] = git_url
        __props__.__dict__["heroku_hostname"] = heroku_hostname
        __props__.__dict__["internal_routing"] = internal_routing
        __props__.__dict__["name"] = name
        __props__.__dict__["organization"] = organization
        __props__.__dict__["region"] = region
        __props__.__dict__["sensitive_config_vars"] = sensitive_config_vars
        __props__.__dict__["space"] = space
        __props__.__dict__["stack"] = stack
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["web_url"] = web_url
        return App(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acm(self) -> pulumi.Output[bool]:
        """
        The flag representing Automated Certificate Management for the app.
        """
        return pulumi.get(self, "acm")

    @property
    @pulumi.getter(name="allConfigVars")
    def all_config_vars(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "all_config_vars")

    @property
    @pulumi.getter
    def buildpacks(self) -> pulumi.Output[Sequence[str]]:
        """
        Buildpack names or URLs for the application.
        Buildpacks configured externally won't be altered if this is not present.
        """
        return pulumi.get(self, "buildpacks")

    @property
    @pulumi.getter(name="configVars")
    def config_vars(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "config_vars")

    @property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> pulumi.Output[str]:
        """
        The Git URL for the application. This is used for
        deploying new versions of the app.
        """
        return pulumi.get(self, "git_url")

    @property
    @pulumi.getter(name="herokuHostname")
    def heroku_hostname(self) -> pulumi.Output[str]:
        """
        A hostname for the Heroku application, suitable
        for pointing DNS records.
        """
        return pulumi.get(self, "heroku_hostname")

    @property
    @pulumi.getter(name="internalRouting")
    def internal_routing(self) -> pulumi.Output[bool]:
        """
        If true, the application will be routable
        only internally in a private space. This option is only available for apps
        that also specify `space`.
        """
        return pulumi.get(self, "internal_routing")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the application. In Heroku, this is also the
        unique ID, so it must be unique and have a minimum of 3 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[Optional['outputs.AppOrganization']]:
        """
        A block that can be specified once to define
        Heroku Team settings for this app. The fields for this block are
        documented below.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region that the app should be deployed in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sensitiveConfigVars")
    def sensitive_config_vars(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "sensitive_config_vars")

    @property
    @pulumi.getter
    def space(self) -> pulumi.Output[Optional[str]]:
        """
        The name of a private space to create the app in.
        """
        return pulumi.get(self, "space")

    @property
    @pulumi.getter
    def stack(self) -> pulumi.Output[str]:
        """
        The application stack is what platform to run the application in.
        """
        return pulumi.get(self, "stack")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The unique UUID of the Heroku app. **NOTE:** Use this for `null_resource` triggers.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> pulumi.Output[str]:
        """
        The web (HTTP) URL that the application can be accessed
        at by default.
        """
        return pulumi.get(self, "web_url")

