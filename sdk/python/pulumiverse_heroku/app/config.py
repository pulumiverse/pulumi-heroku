# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ConfigArgs', 'Config']

@pulumi.input_type
class ConfigArgs:
    def __init__(__self__, *,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Config resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of vars that are can be outputted in plaintext.
        """
        if sensitive_vars is not None:
            pulumi.set(__self__, "sensitive_vars", sensitive_vars)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sensitive_vars")

    @sensitive_vars.setter
    def sensitive_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sensitive_vars", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of vars that are can be outputted in plaintext.
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)


@pulumi.input_type
class _ConfigState:
    def __init__(__self__, *,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Config resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of vars that are can be outputted in plaintext.
        """
        if sensitive_vars is not None:
            pulumi.set(__self__, "sensitive_vars", sensitive_vars)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sensitive_vars")

    @sensitive_vars.setter
    def sensitive_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sensitive_vars", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of vars that are can be outputted in plaintext.
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)


class Config(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## Import

        The `heroku_config` resource is a meta-resource, managed only within Terraform state.

        It does not exist as a native Heroku resource. Therefore, it is not possible to import an existing `heroku_config` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of vars that are can be outputted in plaintext.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ConfigArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        The `heroku_config` resource is a meta-resource, managed only within Terraform state.

        It does not exist as a native Heroku resource. Therefore, it is not possible to import an existing `heroku_config` configuration.

        :param str resource_name: The name of the resource.
        :param ConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigArgs.__new__(ConfigArgs)

            __props__.__dict__["sensitive_vars"] = None if sensitive_vars is None else pulumi.Output.secret(sensitive_vars)
            __props__.__dict__["vars"] = vars
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["sensitiveVars"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Config, __self__).__init__(
            'heroku:app/config:Config',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'Config':
        """
        Get an existing Config resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of vars that are can be outputted in plaintext.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigState.__new__(_ConfigState)

        __props__.__dict__["sensitive_vars"] = sensitive_vars
        __props__.__dict__["vars"] = vars
        return Config(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "sensitive_vars")

    @property
    @pulumi.getter
    def vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map of vars that are can be outputted in plaintext.
        """
        return pulumi.get(self, "vars")

