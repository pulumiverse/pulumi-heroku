# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ConfigAssociationArgs', 'ConfigAssociation']

@pulumi.input_type
class ConfigAssociationArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ConfigAssociation resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of config vars that can be output in plaintext.
        """
        pulumi.set(__self__, "app_id", app_id)
        if sensitive_vars is not None:
            pulumi.set(__self__, "sensitive_vars", sensitive_vars)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sensitive_vars")

    @sensitive_vars.setter
    def sensitive_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sensitive_vars", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of config vars that can be output in plaintext.
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)


@pulumi.input_type
class _ConfigAssociationState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ConfigAssociation resources.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of config vars that can be output in plaintext.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if sensitive_vars is not None:
            pulumi.set(__self__, "sensitive_vars", sensitive_vars)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sensitive_vars")

    @sensitive_vars.setter
    def sensitive_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sensitive_vars", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of config vars that can be output in plaintext.
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)


class ConfigAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## Import

        This resource defines two config var attributes with one of them used for masking any sensitive/secret variables

        during a `pulumi preview|apply` in a CI build, terminal, etc. This 'sensitive' distinction for config vars is unique to

        this provider and not a built-in feature of the Heroku Platform API. Therefore, it will not be possible to import

        this resource.

        However, it is safe to define the resource in your configuration file and execute a `pulumi up`

        as the end result is `noop` when the config vars already exist on the remote resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of config vars that can be output in plaintext.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        This resource defines two config var attributes with one of them used for masking any sensitive/secret variables

        during a `pulumi preview|apply` in a CI build, terminal, etc. This 'sensitive' distinction for config vars is unique to

        this provider and not a built-in feature of the Heroku Platform API. Therefore, it will not be possible to import

        this resource.

        However, it is safe to define the resource in your configuration file and execute a `pulumi up`

        as the end result is `noop` when the config vars already exist on the remote resource.

        :param str resource_name: The name of the resource.
        :param ConfigAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigAssociationArgs.__new__(ConfigAssociationArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["sensitive_vars"] = None if sensitive_vars is None else pulumi.Output.secret(sensitive_vars)
            __props__.__dict__["vars"] = vars
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["sensitiveVars"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ConfigAssociation, __self__).__init__(
            'heroku:app/configAssociation:ConfigAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'ConfigAssociation':
        """
        Get an existing ConfigAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of config vars that can be output in plaintext.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigAssociationState.__new__(_ConfigAssociationState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["sensitive_vars"] = sensitive_vars
        __props__.__dict__["vars"] = vars
        return ConfigAssociation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "sensitive_vars")

    @property
    @pulumi.getter
    def vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map of config vars that can be output in plaintext.
        """
        return pulumi.get(self, "vars")

