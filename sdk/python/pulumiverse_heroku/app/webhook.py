# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['WebhookArgs', 'Webhook']

@pulumi.input_type
class WebhookArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 includes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 level: pulumi.Input[str],
                 url: pulumi.Input[str],
                 authorization: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Webhook resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includes: List of events to deliver to the webhook.
        :param pulumi.Input[str] level: The webhook level (either `notify` or `sync`)
        :param pulumi.Input[str] url: Optional plan configuration.
        :param pulumi.Input[str] authorization: Values used in `Authorization` header. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        :param pulumi.Input[str] secret: Value used to sign webhook payloads. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "includes", includes)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "url", url)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def includes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of events to deliver to the webhook.
        """
        return pulumi.get(self, "includes")

    @includes.setter
    def includes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "includes", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        The webhook level (either `notify` or `sync`)
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Optional plan configuration.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[str]]:
        """
        Values used in `Authorization` header. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Value used to sign webhook payloads. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class _WebhookState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Webhook resources.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] authorization: Values used in `Authorization` header. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includes: List of events to deliver to the webhook.
        :param pulumi.Input[str] level: The webhook level (either `notify` or `sync`)
        :param pulumi.Input[str] secret: Value used to sign webhook payloads. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        :param pulumi.Input[str] url: Optional plan configuration.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[str]]:
        """
        Values used in `Authorization` header. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter
    def includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of events to deliver to the webhook.
        """
        return pulumi.get(self, "includes")

    @includes.setter
    def includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "includes", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        The webhook level (either `notify` or `sync`)
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Value used to sign webhook payloads. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Optional plan configuration.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class Webhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a [Heroku App Webhook](https://devcenter.heroku.com/categories/app-webhooks).

        ## Example Usage

        ## Importing

        Existing webhooks can be imported using the combination of the application name or id, a colon, and the webhook name or id, e.g.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] authorization: Values used in `Authorization` header. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includes: List of events to deliver to the webhook.
        :param pulumi.Input[str] level: The webhook level (either `notify` or `sync`)
        :param pulumi.Input[str] secret: Value used to sign webhook payloads. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        :param pulumi.Input[str] url: Optional plan configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a [Heroku App Webhook](https://devcenter.heroku.com/categories/app-webhooks).

        ## Example Usage

        ## Importing

        Existing webhooks can be imported using the combination of the application name or id, a colon, and the webhook name or id, e.g.

        :param str resource_name: The name of the resource.
        :param WebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 authorization: Optional[pulumi.Input[str]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebhookArgs.__new__(WebhookArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["authorization"] = None if authorization is None else pulumi.Output.secret(authorization)
            if includes is None and not opts.urn:
                raise TypeError("Missing required property 'includes'")
            __props__.__dict__["includes"] = includes
            if level is None and not opts.urn:
                raise TypeError("Missing required property 'level'")
            __props__.__dict__["level"] = level
            __props__.__dict__["secret"] = None if secret is None else pulumi.Output.secret(secret)
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authorization", "secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Webhook, __self__).__init__(
            'heroku:app/webhook:Webhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            authorization: Optional[pulumi.Input[str]] = None,
            includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            level: Optional[pulumi.Input[str]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Webhook':
        """
        Get an existing Webhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] authorization: Values used in `Authorization` header. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includes: List of events to deliver to the webhook.
        :param pulumi.Input[str] level: The webhook level (either `notify` or `sync`)
        :param pulumi.Input[str] secret: Value used to sign webhook payloads. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        :param pulumi.Input[str] url: Optional plan configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebhookState.__new__(_WebhookState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["authorization"] = authorization
        __props__.__dict__["includes"] = includes
        __props__.__dict__["level"] = level
        __props__.__dict__["secret"] = secret
        __props__.__dict__["url"] = url
        return Webhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Output[Optional[str]]:
        """
        Values used in `Authorization` header. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter
    def includes(self) -> pulumi.Output[Sequence[str]]:
        """
        List of events to deliver to the webhook.
        """
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter
    def level(self) -> pulumi.Output[str]:
        """
        The webhook level (either `notify` or `sync`)
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[str]]:
        """
        Value used to sign webhook payloads. Once set, this value cannot be fetched from the Heroku API, but it can be updated.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Optional plan configuration.
        """
        return pulumi.get(self, "url")

