# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BuildArgs', 'Build']

@pulumi.input_type
class BuildArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 source: pulumi.Input['BuildSourceArgs'],
                 buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Build resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input['BuildSourceArgs'] source: A block that specifies the source code to build & release:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buildpacks: List of buildpack GitHub URLs
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "source", source)
        if buildpacks is not None:
            pulumi.set(__self__, "buildpacks", buildpacks)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['BuildSourceArgs']:
        """
        A block that specifies the source code to build & release:
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['BuildSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def buildpacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of buildpack GitHub URLs
        """
        return pulumi.get(self, "buildpacks")

    @buildpacks.setter
    def buildpacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "buildpacks", value)


@pulumi.input_type
class _BuildState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 local_checksum: Optional[pulumi.Input[str]] = None,
                 output_stream_url: Optional[pulumi.Input[str]] = None,
                 release_id: Optional[pulumi.Input[str]] = None,
                 slug_id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['BuildSourceArgs']] = None,
                 stack: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['BuildUserArgs']]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Build resources.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buildpacks: List of buildpack GitHub URLs
        :param pulumi.Input[str] output_stream_url: URL that [streams the log output from the build](https://devcenter.heroku.com/articles/build-and-release-using-the-api#streaming-build-output)
        :param pulumi.Input[str] release_id: The Heroku app release created with a build's slug
        :param pulumi.Input[str] slug_id: The Heroku slug created by a build
        :param pulumi.Input['BuildSourceArgs'] source: A block that specifies the source code to build & release:
        :param pulumi.Input[str] stack: Name or ID of the [Heroku stack](https://devcenter.heroku.com/articles/stack)
        :param pulumi.Input[str] status: The status of a build. Possible values are `pending`, `successful` and `failed`
        :param pulumi.Input[Sequence[pulumi.Input['BuildUserArgs']]] users: Heroku account that created a build
        :param pulumi.Input[str] uuid: The ID of the build
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if buildpacks is not None:
            pulumi.set(__self__, "buildpacks", buildpacks)
        if local_checksum is not None:
            pulumi.set(__self__, "local_checksum", local_checksum)
        if output_stream_url is not None:
            pulumi.set(__self__, "output_stream_url", output_stream_url)
        if release_id is not None:
            pulumi.set(__self__, "release_id", release_id)
        if slug_id is not None:
            pulumi.set(__self__, "slug_id", slug_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if stack is not None:
            pulumi.set(__self__, "stack", stack)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def buildpacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of buildpack GitHub URLs
        """
        return pulumi.get(self, "buildpacks")

    @buildpacks.setter
    def buildpacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "buildpacks", value)

    @property
    @pulumi.getter(name="localChecksum")
    def local_checksum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_checksum")

    @local_checksum.setter
    def local_checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_checksum", value)

    @property
    @pulumi.getter(name="outputStreamUrl")
    def output_stream_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL that [streams the log output from the build](https://devcenter.heroku.com/articles/build-and-release-using-the-api#streaming-build-output)
        """
        return pulumi.get(self, "output_stream_url")

    @output_stream_url.setter
    def output_stream_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_stream_url", value)

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Heroku app release created with a build's slug
        """
        return pulumi.get(self, "release_id")

    @release_id.setter
    def release_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_id", value)

    @property
    @pulumi.getter(name="slugId")
    def slug_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Heroku slug created by a build
        """
        return pulumi.get(self, "slug_id")

    @slug_id.setter
    def slug_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug_id", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['BuildSourceArgs']]:
        """
        A block that specifies the source code to build & release:
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['BuildSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def stack(self) -> Optional[pulumi.Input[str]]:
        """
        Name or ID of the [Heroku stack](https://devcenter.heroku.com/articles/stack)
        """
        return pulumi.get(self, "stack")

    @stack.setter
    def stack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stack", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of a build. Possible values are `pending`, `successful` and `failed`
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BuildUserArgs']]]]:
        """
        Heroku account that created a build
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BuildUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the build
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Build(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input[Union['BuildSourceArgs', 'BuildSourceArgsDict']]] = None,
                 __props__=None):
        """
        ## Import

        Existing builds can be imported using the combination of the application name, a colon, and the build ID.

        For example:

        ```sh
        $ pulumi import heroku:build/build:Build foobar bazbux:4f1db8ef-ed5c-4c42-a3d6-3c28262d5abc
        ```

        * `foobar` is the **heroku_build** resource's name

        * `bazbux` is the Heroku app name (or ID) that the build belongs to

        * `:` separates the app identifier & the build identifier

        * `4f1db8ef…` is the build ID

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buildpacks: List of buildpack GitHub URLs
        :param pulumi.Input[Union['BuildSourceArgs', 'BuildSourceArgsDict']] source: A block that specifies the source code to build & release:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BuildArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Existing builds can be imported using the combination of the application name, a colon, and the build ID.

        For example:

        ```sh
        $ pulumi import heroku:build/build:Build foobar bazbux:4f1db8ef-ed5c-4c42-a3d6-3c28262d5abc
        ```

        * `foobar` is the **heroku_build** resource's name

        * `bazbux` is the Heroku app name (or ID) that the build belongs to

        * `:` separates the app identifier & the build identifier

        * `4f1db8ef…` is the build ID

        :param str resource_name: The name of the resource.
        :param BuildArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BuildArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input[Union['BuildSourceArgs', 'BuildSourceArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BuildArgs.__new__(BuildArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["buildpacks"] = buildpacks
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["local_checksum"] = None
            __props__.__dict__["output_stream_url"] = None
            __props__.__dict__["release_id"] = None
            __props__.__dict__["slug_id"] = None
            __props__.__dict__["stack"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["users"] = None
            __props__.__dict__["uuid"] = None
        super(Build, __self__).__init__(
            'heroku:build/build:Build',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            buildpacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            local_checksum: Optional[pulumi.Input[str]] = None,
            output_stream_url: Optional[pulumi.Input[str]] = None,
            release_id: Optional[pulumi.Input[str]] = None,
            slug_id: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[Union['BuildSourceArgs', 'BuildSourceArgsDict']]] = None,
            stack: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BuildUserArgs', 'BuildUserArgsDict']]]]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Build':
        """
        Get an existing Build resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buildpacks: List of buildpack GitHub URLs
        :param pulumi.Input[str] output_stream_url: URL that [streams the log output from the build](https://devcenter.heroku.com/articles/build-and-release-using-the-api#streaming-build-output)
        :param pulumi.Input[str] release_id: The Heroku app release created with a build's slug
        :param pulumi.Input[str] slug_id: The Heroku slug created by a build
        :param pulumi.Input[Union['BuildSourceArgs', 'BuildSourceArgsDict']] source: A block that specifies the source code to build & release:
        :param pulumi.Input[str] stack: Name or ID of the [Heroku stack](https://devcenter.heroku.com/articles/stack)
        :param pulumi.Input[str] status: The status of a build. Possible values are `pending`, `successful` and `failed`
        :param pulumi.Input[Sequence[pulumi.Input[Union['BuildUserArgs', 'BuildUserArgsDict']]]] users: Heroku account that created a build
        :param pulumi.Input[str] uuid: The ID of the build
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BuildState.__new__(_BuildState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["buildpacks"] = buildpacks
        __props__.__dict__["local_checksum"] = local_checksum
        __props__.__dict__["output_stream_url"] = output_stream_url
        __props__.__dict__["release_id"] = release_id
        __props__.__dict__["slug_id"] = slug_id
        __props__.__dict__["source"] = source
        __props__.__dict__["stack"] = stack
        __props__.__dict__["status"] = status
        __props__.__dict__["users"] = users
        __props__.__dict__["uuid"] = uuid
        return Build(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def buildpacks(self) -> pulumi.Output[Sequence[str]]:
        """
        List of buildpack GitHub URLs
        """
        return pulumi.get(self, "buildpacks")

    @property
    @pulumi.getter(name="localChecksum")
    def local_checksum(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_checksum")

    @property
    @pulumi.getter(name="outputStreamUrl")
    def output_stream_url(self) -> pulumi.Output[str]:
        """
        URL that [streams the log output from the build](https://devcenter.heroku.com/articles/build-and-release-using-the-api#streaming-build-output)
        """
        return pulumi.get(self, "output_stream_url")

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> pulumi.Output[str]:
        """
        The Heroku app release created with a build's slug
        """
        return pulumi.get(self, "release_id")

    @property
    @pulumi.getter(name="slugId")
    def slug_id(self) -> pulumi.Output[str]:
        """
        The Heroku slug created by a build
        """
        return pulumi.get(self, "slug_id")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.BuildSource']:
        """
        A block that specifies the source code to build & release:
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def stack(self) -> pulumi.Output[str]:
        """
        Name or ID of the [Heroku stack](https://devcenter.heroku.com/articles/stack)
        """
        return pulumi.get(self, "stack")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of a build. Possible values are `pending`, `successful` and `failed`
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence['outputs.BuildUser']]:
        """
        Heroku account that created a build
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The ID of the build
        """
        return pulumi.get(self, "uuid")

