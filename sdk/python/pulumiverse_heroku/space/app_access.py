# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AppAccessArgs', 'AppAccess']

@pulumi.input_type
class AppAccessArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 permissions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 space: pulumi.Input[str]):
        """
        The set of arguments for constructing a AppAccess resource.
        :param pulumi.Input[str] email: The email of the existing Heroku Team member.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: The permissions to grant the team member for the Private Space.
               Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
               Members with admin role will always have `create_apps` permissions, which cannot be removed.
        :param pulumi.Input[str] space: The ID of the Private Space.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "space", space)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The email of the existing Heroku Team member.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The permissions to grant the team member for the Private Space.
        Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
        Members with admin role will always have `create_apps` permissions, which cannot be removed.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def space(self) -> pulumi.Input[str]:
        """
        The ID of the Private Space.
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: pulumi.Input[str]):
        pulumi.set(self, "space", value)


@pulumi.input_type
class _AppAccessState:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AppAccess resources.
        :param pulumi.Input[str] email: The email of the existing Heroku Team member.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: The permissions to grant the team member for the Private Space.
               Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
               Members with admin role will always have `create_apps` permissions, which cannot be removed.
        :param pulumi.Input[str] space: The ID of the Private Space.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if space is not None:
            pulumi.set(__self__, "space", space)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email of the existing Heroku Team member.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The permissions to grant the team member for the Private Space.
        Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
        Members with admin role will always have `create_apps` permissions, which cannot be removed.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def space(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Private Space.
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space", value)


class AppAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource for managing permissions for the entire Private Space. Members with the admin role will
        always have full permissions in the Private Space, so using this resource on an admin will have no effect.
        The provided email must already be a member of the Heroku Team. Currently, the only supported permission is `create_apps`.

        ## Example Usage

        ## Importing

        Existing permissions can be imported using the combination of the Private Space name, a colon, and the member email.

        For example:

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The email of the existing Heroku Team member.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: The permissions to grant the team member for the Private Space.
               Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
               Members with admin role will always have `create_apps` permissions, which cannot be removed.
        :param pulumi.Input[str] space: The ID of the Private Space.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource for managing permissions for the entire Private Space. Members with the admin role will
        always have full permissions in the Private Space, so using this resource on an admin will have no effect.
        The provided email must already be a member of the Heroku Team. Currently, the only supported permission is `create_apps`.

        ## Example Usage

        ## Importing

        Existing permissions can be imported using the combination of the Private Space name, a colon, and the member email.

        For example:

        :param str resource_name: The name of the resource.
        :param AppAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppAccessArgs.__new__(AppAccessArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if permissions is None and not opts.urn:
                raise TypeError("Missing required property 'permissions'")
            __props__.__dict__["permissions"] = permissions
            if space is None and not opts.urn:
                raise TypeError("Missing required property 'space'")
            __props__.__dict__["space"] = space
        super(AppAccess, __self__).__init__(
            'heroku:space/appAccess:AppAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            email: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            space: Optional[pulumi.Input[str]] = None) -> 'AppAccess':
        """
        Get an existing AppAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The email of the existing Heroku Team member.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: The permissions to grant the team member for the Private Space.
               Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
               Members with admin role will always have `create_apps` permissions, which cannot be removed.
        :param pulumi.Input[str] space: The ID of the Private Space.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppAccessState.__new__(_AppAccessState)

        __props__.__dict__["email"] = email
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["space"] = space
        return AppAccess(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        The email of the existing Heroku Team member.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence[str]]:
        """
        The permissions to grant the team member for the Private Space.
        Currently `create_apps` is the only supported permission. If not provided the member will have no permissions to the space.
        Members with admin role will always have `create_apps` permissions, which cannot be removed.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def space(self) -> pulumi.Output[str]:
        """
        The ID of the Private Space.
        """
        return pulumi.get(self, "space")

