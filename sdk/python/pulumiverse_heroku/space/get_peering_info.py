# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPeeringInfoResult',
    'AwaitableGetPeeringInfoResult',
    'get_peering_info',
    'get_peering_info_output',
]

@pulumi.output_type
class GetPeeringInfoResult:
    """
    A collection of values returned by getPeeringInfo.
    """
    def __init__(__self__, aws_account_id=None, aws_region=None, dyno_cidr_blocks=None, id=None, name=None, unavailable_cidr_blocks=None, vpc_cidr=None, vpc_id=None):
        if aws_account_id and not isinstance(aws_account_id, str):
            raise TypeError("Expected argument 'aws_account_id' to be a str")
        pulumi.set(__self__, "aws_account_id", aws_account_id)
        if aws_region and not isinstance(aws_region, str):
            raise TypeError("Expected argument 'aws_region' to be a str")
        pulumi.set(__self__, "aws_region", aws_region)
        if dyno_cidr_blocks and not isinstance(dyno_cidr_blocks, list):
            raise TypeError("Expected argument 'dyno_cidr_blocks' to be a list")
        pulumi.set(__self__, "dyno_cidr_blocks", dyno_cidr_blocks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if unavailable_cidr_blocks and not isinstance(unavailable_cidr_blocks, list):
            raise TypeError("Expected argument 'unavailable_cidr_blocks' to be a list")
        pulumi.set(__self__, "unavailable_cidr_blocks", unavailable_cidr_blocks)
        if vpc_cidr and not isinstance(vpc_cidr, str):
            raise TypeError("Expected argument 'vpc_cidr' to be a str")
        pulumi.set(__self__, "vpc_cidr", vpc_cidr)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> str:
        """
        The AWS account ID that the Heroku Private Space runs in.
        """
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> str:
        """
        The AWS region that the Heroku Private Space runs in.
        """
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="dynoCidrBlocks")
    def dyno_cidr_blocks(self) -> Sequence[str]:
        """
        The CIDR blocks that the Dynos run on.
        """
        return pulumi.get(self, "dyno_cidr_blocks")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="unavailableCidrBlocks")
    def unavailable_cidr_blocks(self) -> Sequence[str]:
        """
        A list of unavailable CIDR blocks.
        """
        return pulumi.get(self, "unavailable_cidr_blocks")

    @property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> str:
        """
        The CIDR block of the VPC ID.
        """
        return pulumi.get(self, "vpc_cidr")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The VPC ID of the Heroku Private Space.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetPeeringInfoResult(GetPeeringInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPeeringInfoResult(
            aws_account_id=self.aws_account_id,
            aws_region=self.aws_region,
            dyno_cidr_blocks=self.dyno_cidr_blocks,
            id=self.id,
            name=self.name,
            unavailable_cidr_blocks=self.unavailable_cidr_blocks,
            vpc_cidr=self.vpc_cidr,
            vpc_id=self.vpc_id)


def get_peering_info(name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPeeringInfoResult:
    """
    Use this data source to get peering information about a [Heroku Private Space](https://www.heroku.com/private-spaces).

    ## Example Usage


    :param str name: The name of the Heroku Private Space.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('heroku:space/getPeeringInfo:getPeeringInfo', __args__, opts=opts, typ=GetPeeringInfoResult).value

    return AwaitableGetPeeringInfoResult(
        aws_account_id=pulumi.get(__ret__, 'aws_account_id'),
        aws_region=pulumi.get(__ret__, 'aws_region'),
        dyno_cidr_blocks=pulumi.get(__ret__, 'dyno_cidr_blocks'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        unavailable_cidr_blocks=pulumi.get(__ret__, 'unavailable_cidr_blocks'),
        vpc_cidr=pulumi.get(__ret__, 'vpc_cidr'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_peering_info_output(name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPeeringInfoResult]:
    """
    Use this data source to get peering information about a [Heroku Private Space](https://www.heroku.com/private-spaces).

    ## Example Usage


    :param str name: The name of the Heroku Private Space.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('heroku:space/getPeeringInfo:getPeeringInfo', __args__, opts=opts, typ=GetPeeringInfoResult)
    return __ret__.apply(lambda __response__: GetPeeringInfoResult(
        aws_account_id=pulumi.get(__response__, 'aws_account_id'),
        aws_region=pulumi.get(__response__, 'aws_region'),
        dyno_cidr_blocks=pulumi.get(__response__, 'dyno_cidr_blocks'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        unavailable_cidr_blocks=pulumi.get(__response__, 'unavailable_cidr_blocks'),
        vpc_cidr=pulumi.get(__response__, 'vpc_cidr'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
