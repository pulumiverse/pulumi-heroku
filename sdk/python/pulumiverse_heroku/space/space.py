# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SpaceArgs', 'Space']

@pulumi.input_type
class SpaceArgs:
    def __init__(__self__, *,
                 organization: pulumi.Input[str],
                 cidr: Optional[pulumi.Input[str]] = None,
                 data_cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 shield: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Space resource.
        :param pulumi.Input[str] organization: The name of the Heroku Team which will own the Private Space.
        :param pulumi.Input[str] cidr: The RFC-1918 CIDR the Private Space will use.
               It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
        :param pulumi.Input[str] data_cidr: The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection
               that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
        :param pulumi.Input[str] name: The name of the Private Space.
        :param pulumi.Input[str] region: provision in a specific [Private Spaces region](https://devcenter.heroku.com/articles/regions#viewing-available-regions).
        :param pulumi.Input[bool] shield: provision as a [Shield Private Space](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces).
        """
        pulumi.set(__self__, "organization", organization)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if data_cidr is not None:
            pulumi.set(__self__, "data_cidr", data_cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if shield is not None:
            pulumi.set(__self__, "shield", shield)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The name of the Heroku Team which will own the Private Space.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The RFC-1918 CIDR the Private Space will use.
        It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="dataCidr")
    def data_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection
        that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
        """
        return pulumi.get(self, "data_cidr")

    @data_cidr.setter
    def data_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Private Space.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        provision in a specific [Private Spaces region](https://devcenter.heroku.com/articles/regions#viewing-available-regions).
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def shield(self) -> Optional[pulumi.Input[bool]]:
        """
        provision as a [Shield Private Space](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces).
        """
        return pulumi.get(self, "shield")

    @shield.setter
    def shield(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shield", value)


@pulumi.input_type
class _SpaceState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 data_cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 outbound_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 shield: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Space resources.
        :param pulumi.Input[str] cidr: The RFC-1918 CIDR the Private Space will use.
               It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
        :param pulumi.Input[str] data_cidr: The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection
               that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
        :param pulumi.Input[str] name: The name of the Private Space.
        :param pulumi.Input[str] organization: The name of the Heroku Team which will own the Private Space.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outbound_ips: The space's stable outbound [NAT IPs](https://devcenter.heroku.com/articles/platform-api-reference#space-network-address-translation).
        :param pulumi.Input[str] region: provision in a specific [Private Spaces region](https://devcenter.heroku.com/articles/regions#viewing-available-regions).
        :param pulumi.Input[bool] shield: provision as a [Shield Private Space](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces).
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if data_cidr is not None:
            pulumi.set(__self__, "data_cidr", data_cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if outbound_ips is not None:
            pulumi.set(__self__, "outbound_ips", outbound_ips)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if shield is not None:
            pulumi.set(__self__, "shield", shield)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The RFC-1918 CIDR the Private Space will use.
        It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="dataCidr")
    def data_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection
        that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
        """
        return pulumi.get(self, "data_cidr")

    @data_cidr.setter
    def data_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Private Space.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Heroku Team which will own the Private Space.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="outboundIps")
    def outbound_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The space's stable outbound [NAT IPs](https://devcenter.heroku.com/articles/platform-api-reference#space-network-address-translation).
        """
        return pulumi.get(self, "outbound_ips")

    @outbound_ips.setter
    def outbound_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "outbound_ips", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        provision in a specific [Private Spaces region](https://devcenter.heroku.com/articles/regions#viewing-available-regions).
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def shield(self) -> Optional[pulumi.Input[bool]]:
        """
        provision as a [Shield Private Space](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces).
        """
        return pulumi.get(self, "shield")

    @shield.setter
    def shield(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shield", value)


class Space(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 data_cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 shield: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a Heroku Private Space resource for running apps in isolated, highly available, secure app execution environments.

        ## Example Usage

        A Heroku "team" was originally called an "organization", and that is still
        the identifier used in this resource.

        ## Import

        Spaces can be imported using the space `id`, e.g.

        ```sh
        $ pulumi import heroku:space/space:Space foobar MySpace
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: The RFC-1918 CIDR the Private Space will use.
               It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
        :param pulumi.Input[str] data_cidr: The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection
               that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
        :param pulumi.Input[str] name: The name of the Private Space.
        :param pulumi.Input[str] organization: The name of the Heroku Team which will own the Private Space.
        :param pulumi.Input[str] region: provision in a specific [Private Spaces region](https://devcenter.heroku.com/articles/regions#viewing-available-regions).
        :param pulumi.Input[bool] shield: provision as a [Shield Private Space](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SpaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Heroku Private Space resource for running apps in isolated, highly available, secure app execution environments.

        ## Example Usage

        A Heroku "team" was originally called an "organization", and that is still
        the identifier used in this resource.

        ## Import

        Spaces can be imported using the space `id`, e.g.

        ```sh
        $ pulumi import heroku:space/space:Space foobar MySpace
        ```

        :param str resource_name: The name of the resource.
        :param SpaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 data_cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 shield: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpaceArgs.__new__(SpaceArgs)

            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["data_cidr"] = data_cidr
            __props__.__dict__["name"] = name
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["region"] = region
            __props__.__dict__["shield"] = shield
            __props__.__dict__["outbound_ips"] = None
        super(Space, __self__).__init__(
            'heroku:space/space:Space',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[str]] = None,
            data_cidr: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            outbound_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            shield: Optional[pulumi.Input[bool]] = None) -> 'Space':
        """
        Get an existing Space resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: The RFC-1918 CIDR the Private Space will use.
               It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
        :param pulumi.Input[str] data_cidr: The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection
               that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
        :param pulumi.Input[str] name: The name of the Private Space.
        :param pulumi.Input[str] organization: The name of the Heroku Team which will own the Private Space.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outbound_ips: The space's stable outbound [NAT IPs](https://devcenter.heroku.com/articles/platform-api-reference#space-network-address-translation).
        :param pulumi.Input[str] region: provision in a specific [Private Spaces region](https://devcenter.heroku.com/articles/regions#viewing-available-regions).
        :param pulumi.Input[bool] shield: provision as a [Shield Private Space](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpaceState.__new__(_SpaceState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["data_cidr"] = data_cidr
        __props__.__dict__["name"] = name
        __props__.__dict__["organization"] = organization
        __props__.__dict__["outbound_ips"] = outbound_ips
        __props__.__dict__["region"] = region
        __props__.__dict__["shield"] = shield
        return Space(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[Optional[str]]:
        """
        The RFC-1918 CIDR the Private Space will use.
        It must be a /16 in 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="dataCidr")
    def data_cidr(self) -> pulumi.Output[str]:
        """
        The RFC-1918 CIDR that the Private Space will use for the Heroku-managed peering connection
        that’s automatically created when using Heroku Data add-ons. It must be between a /16 and a /20
        """
        return pulumi.get(self, "data_cidr")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Private Space.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The name of the Heroku Team which will own the Private Space.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="outboundIps")
    def outbound_ips(self) -> pulumi.Output[Sequence[str]]:
        """
        The space's stable outbound [NAT IPs](https://devcenter.heroku.com/articles/platform-api-reference#space-network-address-translation).
        """
        return pulumi.get(self, "outbound_ips")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        provision in a specific [Private Spaces region](https://devcenter.heroku.com/articles/regions#viewing-available-regions).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def shield(self) -> pulumi.Output[Optional[bool]]:
        """
        provision as a [Shield Private Space](https://devcenter.heroku.com/articles/private-spaces#shield-private-spaces).
        """
        return pulumi.get(self, "shield")

