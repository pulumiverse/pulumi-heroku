# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ConfigVarArgs', 'ConfigVar']

@pulumi.input_type
class ConfigVarArgs:
    def __init__(__self__, *,
                 pipeline_id: pulumi.Input[str],
                 pipeline_stage: pulumi.Input[str],
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ConfigVar resource.
        :param pulumi.Input[str] pipeline_id: The UUID of an existing pipeline.
        :param pulumi.Input[str] pipeline_stage: The pipeline's stage. Supported values are `test` & `review`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of config vars that can be output in plaintext.
        """
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "pipeline_stage", pipeline_stage)
        if sensitive_vars is not None:
            pulumi.set(__self__, "sensitive_vars", sensitive_vars)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[str]:
        """
        The UUID of an existing pipeline.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pipeline_id", value)

    @property
    @pulumi.getter(name="pipelineStage")
    def pipeline_stage(self) -> pulumi.Input[str]:
        """
        The pipeline's stage. Supported values are `test` & `review`.
        """
        return pulumi.get(self, "pipeline_stage")

    @pipeline_stage.setter
    def pipeline_stage(self, value: pulumi.Input[str]):
        pulumi.set(self, "pipeline_stage", value)

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sensitive_vars")

    @sensitive_vars.setter
    def sensitive_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sensitive_vars", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of config vars that can be output in plaintext.
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)


@pulumi.input_type
class _ConfigVarState:
    def __init__(__self__, *,
                 all_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pipeline_id: Optional[pulumi.Input[str]] = None,
                 pipeline_stage: Optional[pulumi.Input[str]] = None,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ConfigVar resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] all_vars: All vars of a pipeline stage. This is marked `sensitive` so that `sensitive_vars` do not leak in the console/logs.
        :param pulumi.Input[str] pipeline_id: The UUID of an existing pipeline.
        :param pulumi.Input[str] pipeline_stage: The pipeline's stage. Supported values are `test` & `review`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of config vars that can be output in plaintext.
        """
        if all_vars is not None:
            pulumi.set(__self__, "all_vars", all_vars)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if pipeline_stage is not None:
            pulumi.set(__self__, "pipeline_stage", pipeline_stage)
        if sensitive_vars is not None:
            pulumi.set(__self__, "sensitive_vars", sensitive_vars)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)

    @property
    @pulumi.getter(name="allVars")
    def all_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All vars of a pipeline stage. This is marked `sensitive` so that `sensitive_vars` do not leak in the console/logs.
        """
        return pulumi.get(self, "all_vars")

    @all_vars.setter
    def all_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "all_vars", value)

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of an existing pipeline.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_id", value)

    @property
    @pulumi.getter(name="pipelineStage")
    def pipeline_stage(self) -> Optional[pulumi.Input[str]]:
        """
        The pipeline's stage. Supported values are `test` & `review`.
        """
        return pulumi.get(self, "pipeline_stage")

    @pipeline_stage.setter
    def pipeline_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_stage", value)

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sensitive_vars")

    @sensitive_vars.setter
    def sensitive_vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sensitive_vars", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of config vars that can be output in plaintext.
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)


class ConfigVar(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pipeline_id: Optional[pulumi.Input[str]] = None,
                 pipeline_stage: Optional[pulumi.Input[str]] = None,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage a pipeline's config vars.

        The pipeline config var API can only retrieve config vars that can be set at the pipeline level.
        Additionally, these two supported pipeline stages are:
        - [Heroku CI](https://devcenter.heroku.com/articles/heroku-ci#setting-environment-variables-the-env-key) config vars (test stage)
        - [Review Apps](https://devcenter.heroku.com/articles/github-integration-review-apps#configuration) config vars (review stage)

        The development, staging & production stages do not have stage-level config vars, only those on the apps within each stage.

        ## Example Usage

        ## Import

        This resource defines two config var attributes with one of them used for masking any sensitive/secret variables

        during a `pulumi preview|apply` in a CI build, terminal, etc. This 'sensitive' distinction for config vars is unique to

        this provider and not a built-in feature of the Heroku Platform API. Therefore, it will not be possible to import

        this resource.

        However, it is safe to define the resource in your configuration file and execute a `pulumi up`

        as the end result is `noop` when the config vars already exist on the remote resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] pipeline_id: The UUID of an existing pipeline.
        :param pulumi.Input[str] pipeline_stage: The pipeline's stage. Supported values are `test` & `review`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of config vars that can be output in plaintext.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigVarArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage a pipeline's config vars.

        The pipeline config var API can only retrieve config vars that can be set at the pipeline level.
        Additionally, these two supported pipeline stages are:
        - [Heroku CI](https://devcenter.heroku.com/articles/heroku-ci#setting-environment-variables-the-env-key) config vars (test stage)
        - [Review Apps](https://devcenter.heroku.com/articles/github-integration-review-apps#configuration) config vars (review stage)

        The development, staging & production stages do not have stage-level config vars, only those on the apps within each stage.

        ## Example Usage

        ## Import

        This resource defines two config var attributes with one of them used for masking any sensitive/secret variables

        during a `pulumi preview|apply` in a CI build, terminal, etc. This 'sensitive' distinction for config vars is unique to

        this provider and not a built-in feature of the Heroku Platform API. Therefore, it will not be possible to import

        this resource.

        However, it is safe to define the resource in your configuration file and execute a `pulumi up`

        as the end result is `noop` when the config vars already exist on the remote resource.

        :param str resource_name: The name of the resource.
        :param ConfigVarArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigVarArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pipeline_id: Optional[pulumi.Input[str]] = None,
                 pipeline_stage: Optional[pulumi.Input[str]] = None,
                 sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigVarArgs.__new__(ConfigVarArgs)

            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            if pipeline_stage is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_stage'")
            __props__.__dict__["pipeline_stage"] = pipeline_stage
            __props__.__dict__["sensitive_vars"] = None if sensitive_vars is None else pulumi.Output.secret(sensitive_vars)
            __props__.__dict__["vars"] = vars
            __props__.__dict__["all_vars"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["allVars", "sensitiveVars"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ConfigVar, __self__).__init__(
            'heroku:pipeline/configVar:ConfigVar',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            all_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            pipeline_id: Optional[pulumi.Input[str]] = None,
            pipeline_stage: Optional[pulumi.Input[str]] = None,
            sensitive_vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'ConfigVar':
        """
        Get an existing ConfigVar resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] all_vars: All vars of a pipeline stage. This is marked `sensitive` so that `sensitive_vars` do not leak in the console/logs.
        :param pulumi.Input[str] pipeline_id: The UUID of an existing pipeline.
        :param pulumi.Input[str] pipeline_stage: The pipeline's stage. Supported values are `test` & `review`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: Map of config vars that can be output in plaintext.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigVarState.__new__(_ConfigVarState)

        __props__.__dict__["all_vars"] = all_vars
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["pipeline_stage"] = pipeline_stage
        __props__.__dict__["sensitive_vars"] = sensitive_vars
        __props__.__dict__["vars"] = vars
        return ConfigVar(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allVars")
    def all_vars(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All vars of a pipeline stage. This is marked `sensitive` so that `sensitive_vars` do not leak in the console/logs.
        """
        return pulumi.get(self, "all_vars")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[str]:
        """
        The UUID of an existing pipeline.
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="pipelineStage")
    def pipeline_stage(self) -> pulumi.Output[str]:
        """
        The pipeline's stage. Supported values are `test` & `review`.
        """
        return pulumi.get(self, "pipeline_stage")

    @property
    @pulumi.getter(name="sensitiveVars")
    def sensitive_vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "sensitive_vars")

    @property
    @pulumi.getter
    def vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map of config vars that can be output in plaintext.
        """
        return pulumi.get(self, "vars")

