# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SslArgs', 'Ssl']

@pulumi.input_type
class SslArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 certificate_chain: pulumi.Input[str],
                 private_key: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ssl resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] certificate_chain: The certificate chain to add.
        :param pulumi.Input[str] private_key: The private key for a given certificate chain. You **must** set this attribute when creating or
               updating an SSL resource. However, **do not** set a value for this attribute if you are initially importing an existing
               SSL resource. The attribute value does not get displayed in logs or regular output.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "certificate_chain", certificate_chain)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Input[str]:
        """
        The certificate chain to add.
        """
        return pulumi.get(self, "certificate_chain")

    @certificate_chain.setter
    def certificate_chain(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_chain", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The private key for a given certificate chain. You **must** set this attribute when creating or
        updating an SSL resource. However, **do not** set a value for this attribute if you are initially importing an existing
        SSL resource. The attribute value does not get displayed in logs or regular output.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class _SslState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 certificate_chain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ssl resources.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] certificate_chain: The certificate chain to add.
        :param pulumi.Input[str] name: The name of the SSL certificate
        :param pulumi.Input[str] private_key: The private key for a given certificate chain. You **must** set this attribute when creating or
               updating an SSL resource. However, **do not** set a value for this attribute if you are initially importing an existing
               SSL resource. The attribute value does not get displayed in logs or regular output.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if certificate_chain is not None:
            pulumi.set(__self__, "certificate_chain", certificate_chain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate chain to add.
        """
        return pulumi.get(self, "certificate_chain")

    @certificate_chain.setter
    def certificate_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_chain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SSL certificate
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The private key for a given certificate chain. You **must** set this attribute when creating or
        updating an SSL resource. However, **do not** set a value for this attribute if you are initially importing an existing
        SSL resource. The attribute value does not get displayed in logs or regular output.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)


class Ssl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 certificate_chain: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages an SSL certificate for a Heroku app.

        > **IMPORTANT!**
        This resource renders the "private_key" attribute in plain-text in your state file.
        Please ensure that your state file is properly secured and encrypted at rest.

        ## Example Usage

        ## Importing

        An existing SSL resource can be imported using a composite value of the app name and certificate UUID separated by a colon.

        For example:

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] certificate_chain: The certificate chain to add.
        :param pulumi.Input[str] private_key: The private key for a given certificate chain. You **must** set this attribute when creating or
               updating an SSL resource. However, **do not** set a value for this attribute if you are initially importing an existing
               SSL resource. The attribute value does not get displayed in logs or regular output.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SslArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages an SSL certificate for a Heroku app.

        > **IMPORTANT!**
        This resource renders the "private_key" attribute in plain-text in your state file.
        Please ensure that your state file is properly secured and encrypted at rest.

        ## Example Usage

        ## Importing

        An existing SSL resource can be imported using a composite value of the app name and certificate UUID separated by a colon.

        For example:

        :param str resource_name: The name of the resource.
        :param SslArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SslArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 certificate_chain: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SslArgs.__new__(SslArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            if certificate_chain is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_chain'")
            __props__.__dict__["certificate_chain"] = certificate_chain
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["name"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Ssl, __self__).__init__(
            'heroku:ssl/ssl:Ssl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            certificate_chain: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None) -> 'Ssl':
        """
        Get an existing Ssl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] certificate_chain: The certificate chain to add.
        :param pulumi.Input[str] name: The name of the SSL certificate
        :param pulumi.Input[str] private_key: The private key for a given certificate chain. You **must** set this attribute when creating or
               updating an SSL resource. However, **do not** set a value for this attribute if you are initially importing an existing
               SSL resource. The attribute value does not get displayed in logs or regular output.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SslState.__new__(_SslState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["certificate_chain"] = certificate_chain
        __props__.__dict__["name"] = name
        __props__.__dict__["private_key"] = private_key
        return Ssl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Output[str]:
        """
        The certificate chain to add.
        """
        return pulumi.get(self, "certificate_chain")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the SSL certificate
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[str]]:
        """
        The private key for a given certificate chain. You **must** set this attribute when creating or
        updating an SSL resource. However, **do not** set a value for this attribute if you are initially importing an existing
        SSL resource. The attribute value does not get displayed in logs or regular output.
        """
        return pulumi.get(self, "private_key")

