# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetTeamResult',
    'AwaitableGetTeamResult',
    'get_team',
    'get_team_output',
]

@pulumi.output_type
class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, default=None, id=None, membership_limit=None, name=None, provisioned_licenses=None, type=None):
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if membership_limit and not isinstance(membership_limit, int):
            raise TypeError("Expected argument 'membership_limit' to be a int")
        pulumi.set(__self__, "membership_limit", membership_limit)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioned_licenses and not isinstance(provisioned_licenses, bool):
            raise TypeError("Expected argument 'provisioned_licenses' to be a bool")
        pulumi.set(__self__, "provisioned_licenses", provisioned_licenses)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def default(self) -> bool:
        """
        Whether to use this team when none is specified
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="membershipLimit")
    def membership_limit(self) -> int:
        """
        Upper limit of members allowed in a team
        """
        return pulumi.get(self, "membership_limit")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisionedLicenses")
    def provisioned_licenses(self) -> bool:
        """
        Whether the team is provisioned licenses by Salesforce
        """
        return pulumi.get(self, "provisioned_licenses")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of team Will likely be either "enterprise" or "team"
        """
        return pulumi.get(self, "type")


class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            default=self.default,
            id=self.id,
            membership_limit=self.membership_limit,
            name=self.name,
            provisioned_licenses=self.provisioned_licenses,
            type=self.type)


def get_team(name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamResult:
    """
    Use this data source to get information about a Heroku Team.

    ## Example Usage


    :param str name: The team name
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('heroku:team/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult).value

    return AwaitableGetTeamResult(
        default=pulumi.get(__ret__, 'default'),
        id=pulumi.get(__ret__, 'id'),
        membership_limit=pulumi.get(__ret__, 'membership_limit'),
        name=pulumi.get(__ret__, 'name'),
        provisioned_licenses=pulumi.get(__ret__, 'provisioned_licenses'),
        type=pulumi.get(__ret__, 'type'))
def get_team_output(name: Optional[pulumi.Input[str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTeamResult]:
    """
    Use this data source to get information about a Heroku Team.

    ## Example Usage


    :param str name: The team name
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('heroku:team/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult)
    return __ret__.apply(lambda __response__: GetTeamResult(
        default=pulumi.get(__response__, 'default'),
        id=pulumi.get(__response__, 'id'),
        membership_limit=pulumi.get(__response__, 'membership_limit'),
        name=pulumi.get(__response__, 'name'),
        provisioned_licenses=pulumi.get(__response__, 'provisioned_licenses'),
        type=pulumi.get(__response__, 'type')))
