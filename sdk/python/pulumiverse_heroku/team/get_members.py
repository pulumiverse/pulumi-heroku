# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMembersResult',
    'AwaitableGetMembersResult',
    'get_members',
    'get_members_output',
]

@pulumi.output_type
class GetMembersResult:
    """
    A collection of values returned by getMembers.
    """
    def __init__(__self__, id=None, members=None, roles=None, team=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if team and not isinstance(team, str):
            raise TypeError("Expected argument 'team' to be a str")
        pulumi.set(__self__, "team", team)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetMembersMemberResult']:
        """
        All members of the team that have a specified role defined in the `roles` attribute above.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def team(self) -> str:
        return pulumi.get(self, "team")


class AwaitableGetMembersResult(GetMembersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMembersResult(
            id=self.id,
            members=self.members,
            roles=self.roles,
            team=self.team)


def get_members(roles: Optional[Sequence[str]] = None,
                team: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMembersResult:
    """
    Use this data source to get information about members for a Heroku Team.

    ## Example Usage


    :param Sequence[str] roles: List of roles. Acceptable values are `admin`, `member`, `viewer`, `collaborator`, `owner`.
           At least one role must be specified.
    :param str team: The team name.
    """
    __args__ = dict()
    __args__['roles'] = roles
    __args__['team'] = team
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('heroku:team/getMembers:getMembers', __args__, opts=opts, typ=GetMembersResult).value

    return AwaitableGetMembersResult(
        id=pulumi.get(__ret__, 'id'),
        members=pulumi.get(__ret__, 'members'),
        roles=pulumi.get(__ret__, 'roles'),
        team=pulumi.get(__ret__, 'team'))
def get_members_output(roles: Optional[pulumi.Input[Sequence[str]]] = None,
                       team: Optional[pulumi.Input[str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMembersResult]:
    """
    Use this data source to get information about members for a Heroku Team.

    ## Example Usage


    :param Sequence[str] roles: List of roles. Acceptable values are `admin`, `member`, `viewer`, `collaborator`, `owner`.
           At least one role must be specified.
    :param str team: The team name.
    """
    __args__ = dict()
    __args__['roles'] = roles
    __args__['team'] = team
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('heroku:team/getMembers:getMembers', __args__, opts=opts, typ=GetMembersResult)
    return __ret__.apply(lambda __response__: GetMembersResult(
        id=pulumi.get(__response__, 'id'),
        members=pulumi.get(__response__, 'members'),
        roles=pulumi.get(__response__, 'roles'),
        team=pulumi.get(__response__, 'team')))
