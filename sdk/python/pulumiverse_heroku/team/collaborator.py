# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CollaboratorArgs', 'Collaborator']

@pulumi.input_type
class CollaboratorArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 email: pulumi.Input[str],
                 permissions: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a Collaborator resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] email: Email address of the team collaborator
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: List of permissions that will be granted to the team collaborator. The order in which
               individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
               for more information on available permissions.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        Email address of the team collaborator
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of permissions that will be granted to the team collaborator. The order in which
        individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
        for more information on available permissions.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "permissions", value)


@pulumi.input_type
class _CollaboratorState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Collaborator resources.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] email: Email address of the team collaborator
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: List of permissions that will be granted to the team collaborator. The order in which
               individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
               for more information on available permissions.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of the team collaborator
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of permissions that will be granted to the team collaborator. The order in which
        individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
        for more information on available permissions.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "permissions", value)


class Collaborator(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        A [Heroku Team Collaborator](https://devcenter.heroku.com/articles/platform-api-reference#team-app-collaborator)
        receives access to a specific Team-owned app.

        To create a Heroku Team, use the [New Team](https://dashboard.heroku.com/teams/new) feature of Heroku Dashboard.
        For Heroku Enterprise accounts, new Teams may be created within the account by users with the right permissions.

        A Heroku "team" was originally called an "organization", and that is still the identifier used elsewhere in this provider.
        For `app.App` & `space.Space` resources, set the Heroku Team name as the "organization".

        > **IMPORTANT:**
        This resource only works for Team-owned apps.

        ## Example Usage

        ## Import

        Team Collaborators can be imported using the combination of the team application name, a colon, and the collaborator's email address

        For example:

        ```sh
        $ pulumi import heroku:team/collaborator:Collaborator foobar-collaborator foobar_app:collaborator@foobar.com
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] email: Email address of the team collaborator
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: List of permissions that will be granted to the team collaborator. The order in which
               individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
               for more information on available permissions.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CollaboratorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A [Heroku Team Collaborator](https://devcenter.heroku.com/articles/platform-api-reference#team-app-collaborator)
        receives access to a specific Team-owned app.

        To create a Heroku Team, use the [New Team](https://dashboard.heroku.com/teams/new) feature of Heroku Dashboard.
        For Heroku Enterprise accounts, new Teams may be created within the account by users with the right permissions.

        A Heroku "team" was originally called an "organization", and that is still the identifier used elsewhere in this provider.
        For `app.App` & `space.Space` resources, set the Heroku Team name as the "organization".

        > **IMPORTANT:**
        This resource only works for Team-owned apps.

        ## Example Usage

        ## Import

        Team Collaborators can be imported using the combination of the team application name, a colon, and the collaborator's email address

        For example:

        ```sh
        $ pulumi import heroku:team/collaborator:Collaborator foobar-collaborator foobar_app:collaborator@foobar.com
        ```

        :param str resource_name: The name of the resource.
        :param CollaboratorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CollaboratorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CollaboratorArgs.__new__(CollaboratorArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if permissions is None and not opts.urn:
                raise TypeError("Missing required property 'permissions'")
            __props__.__dict__["permissions"] = permissions
        super(Collaborator, __self__).__init__(
            'heroku:team/collaborator:Collaborator',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Collaborator':
        """
        Get an existing Collaborator resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
        :param pulumi.Input[str] email: Email address of the team collaborator
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: List of permissions that will be granted to the team collaborator. The order in which
               individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
               for more information on available permissions.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CollaboratorState.__new__(_CollaboratorState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["email"] = email
        __props__.__dict__["permissions"] = permissions
        return Collaborator(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        Heroku app ID (do not use app name)
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        Email address of the team collaborator
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence[str]]:
        """
        List of permissions that will be granted to the team collaborator. The order in which
        individual permissions are set here does not matter. Please [visit this link](https://devcenter.heroku.com/articles/app-permissions)
        for more information on available permissions.
        """
        return pulumi.get(self, "permissions")

