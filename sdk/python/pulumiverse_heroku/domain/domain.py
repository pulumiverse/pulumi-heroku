# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DomainArgs', 'Domain']

@pulumi.input_type
class DomainArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 sni_endpoint_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Domain resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
               
               For apps with ACM enabled (automated certificate management):
        :param pulumi.Input[str] hostname: Must match common name or a subject alternative name of certificate in the `ssl.Ssl` resource references by `sni_endpoint_id`.
        :param pulumi.Input[str] sni_endpoint_id: The ID of the `ssl.Ssl` resource to associate the domain with.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "hostname", hostname)
        if sni_endpoint_id is not None:
            pulumi.set(__self__, "sni_endpoint_id", sni_endpoint_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        Heroku app ID (do not use app name)

        For apps with ACM enabled (automated certificate management):
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Must match common name or a subject alternative name of certificate in the `ssl.Ssl` resource references by `sni_endpoint_id`.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="sniEndpointId")
    def sni_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the `ssl.Ssl` resource to associate the domain with.
        """
        return pulumi.get(self, "sni_endpoint_id")

    @sni_endpoint_id.setter
    def sni_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_endpoint_id", value)


@pulumi.input_type
class _DomainState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 sni_endpoint_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Domain resources.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
               
               For apps with ACM enabled (automated certificate management):
        :param pulumi.Input[str] cname: The CNAME traffic should route to.
        :param pulumi.Input[str] hostname: Must match common name or a subject alternative name of certificate in the `ssl.Ssl` resource references by `sni_endpoint_id`.
        :param pulumi.Input[str] sni_endpoint_id: The ID of the `ssl.Ssl` resource to associate the domain with.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if sni_endpoint_id is not None:
            pulumi.set(__self__, "sni_endpoint_id", sni_endpoint_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Heroku app ID (do not use app name)

        For apps with ACM enabled (automated certificate management):
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        """
        The CNAME traffic should route to.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Must match common name or a subject alternative name of certificate in the `ssl.Ssl` resource references by `sni_endpoint_id`.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="sniEndpointId")
    def sni_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the `ssl.Ssl` resource to associate the domain with.
        """
        return pulumi.get(self, "sni_endpoint_id")

    @sni_endpoint_id.setter
    def sni_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_endpoint_id", value)


class Domain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 sni_endpoint_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Domain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
               
               For apps with ACM enabled (automated certificate management):
        :param pulumi.Input[str] hostname: Must match common name or a subject alternative name of certificate in the `ssl.Ssl` resource references by `sni_endpoint_id`.
        :param pulumi.Input[str] sni_endpoint_id: The ID of the `ssl.Ssl` resource to associate the domain with.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Domain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 sni_endpoint_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainArgs.__new__(DomainArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["sni_endpoint_id"] = sni_endpoint_id
            __props__.__dict__["cname"] = None
        super(Domain, __self__).__init__(
            'heroku:domain/domain:Domain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            cname: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            sni_endpoint_id: Optional[pulumi.Input[str]] = None) -> 'Domain':
        """
        Get an existing Domain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: Heroku app ID (do not use app name)
               
               For apps with ACM enabled (automated certificate management):
        :param pulumi.Input[str] cname: The CNAME traffic should route to.
        :param pulumi.Input[str] hostname: Must match common name or a subject alternative name of certificate in the `ssl.Ssl` resource references by `sni_endpoint_id`.
        :param pulumi.Input[str] sni_endpoint_id: The ID of the `ssl.Ssl` resource to associate the domain with.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainState.__new__(_DomainState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["cname"] = cname
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["sni_endpoint_id"] = sni_endpoint_id
        return Domain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        Heroku app ID (do not use app name)

        For apps with ACM enabled (automated certificate management):
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def cname(self) -> pulumi.Output[str]:
        """
        The CNAME traffic should route to.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        Must match common name or a subject alternative name of certificate in the `ssl.Ssl` resource references by `sni_endpoint_id`.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="sniEndpointId")
    def sni_endpoint_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the `ssl.Ssl` resource to associate the domain with.
        """
        return pulumi.get(self, "sni_endpoint_id")

